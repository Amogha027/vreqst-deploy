{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reconstructFieldPath = exports.selectFields = void 0;\n\nconst _ = require(\"lodash\");\n\nconst selectFields = (req, fields, locations) => _(fields).flatMap(field => _.flatMap(locations, location => {\n  return expandField(req, field, location);\n})) // Avoid duplicates if multiple field selections would return the same field twice.\n// E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n// the instance bla.foo would appear twice, and baz.foo once.\n.uniqWith(isSameFieldInstance).value();\n\nexports.selectFields = selectFields;\n\nfunction isSameFieldInstance(a, b) {\n  return a.path === b.path && a.location === b.location;\n}\n\nfunction expandField(req, field, location) {\n  const originalPath = field;\n  const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n  const paths = [];\n  expandPath(req[location], pathToExpand, paths);\n  return paths.map(path => {\n    const value = path === '' ? req[location] : _.get(req[location], path);\n    return {\n      location,\n      path,\n      originalPath,\n      value,\n      originalValue: value\n    };\n  });\n}\n\nfunction expandPath(object, path, accumulator) {\n  const segments = _.toPath(path);\n\n  const wildcardPos = segments.indexOf('*');\n\n  if (wildcardPos > -1) {\n    const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n\n    if (!subObject || !_.isObjectLike(subObject)) {\n      return;\n    }\n\n    Object.keys(subObject).map(key => segments // Before the *\n    .slice(0, wildcardPos) // The part that the * matched\n    // #1205 - Escape a legit field \"*\" to avoid it from causing infinite recursion\n    .concat(key === '*' ? `\\\\${key}` : key) // After the *\n    .concat(segments.slice(wildcardPos + 1))).forEach(subPath => {\n      expandPath(object, subPath, accumulator);\n    });\n  } else {\n    const reconstructedPath = reconstructFieldPath(segments);\n    accumulator.push(reconstructedPath);\n  }\n}\n/**\n * Reconstructs a field path from a list of path segments.\n *\n * Most segments will be concatenated by a dot, for example `['foo', 'bar']` becomes `foo.bar`.\n * However, a numeric segment will be wrapped in brackets to match regular JS array syntax:\n *\n * ```\n * reconstructFieldPath(['foo', 0, 'bar']) // foo[0].bar\n * ```\n *\n * Segments which have a special character such as `.` will be wrapped in brackets and quotes,\n * which also matches JS syntax for objects with such keys.\n *\n * ```\n * reconstructFieldPath(['foo', 'bar.baz', 'qux']) // foo[\"bar.baz\"].qux\n * ```\n */\n\n\nfunction reconstructFieldPath(segments) {\n  return segments.reduce((prev, segment) => {\n    let part = '';\n    segment = segment === '\\\\*' ? '*' : segment; // TODO: Handle brackets?\n\n    if (segment.includes('.')) {\n      // Special char key access\n      part = `[\"${segment}\"]`;\n    } else if (/^\\d+$/.test(segment)) {\n      // Index access\n      part = `[${segment}]`;\n    } else if (prev) {\n      // Object key access\n      part = `.${segment}`;\n    } else {\n      // Top level key\n      part = segment;\n    }\n\n    return prev + part;\n  }, '');\n}\n\nexports.reconstructFieldPath = reconstructFieldPath;","map":{"version":3,"sources":["/home/amogha/btp/nonlocal/VReqST-main/VReqST/frontend/client/node_modules/express-validator/src/select-fields.js"],"names":["Object","defineProperty","exports","value","reconstructFieldPath","selectFields","_","require","req","fields","locations","flatMap","field","location","expandField","uniqWith","isSameFieldInstance","a","b","path","originalPath","pathToExpand","toLowerCase","paths","expandPath","map","get","originalValue","object","accumulator","segments","toPath","wildcardPos","indexOf","subObject","slice","isObjectLike","keys","key","concat","forEach","subPath","reconstructedPath","push","reduce","prev","segment","part","includes","test"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reconstructFieldPath = exports.selectFields = void 0;\nconst _ = require(\"lodash\");\nconst selectFields = (req, fields, locations) => _(fields)\n    .flatMap(field => _.flatMap(locations, location => {\n    return expandField(req, field, location);\n}))\n    // Avoid duplicates if multiple field selections would return the same field twice.\n    // E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n    // the instance bla.foo would appear twice, and baz.foo once.\n    .uniqWith(isSameFieldInstance)\n    .value();\nexports.selectFields = selectFields;\nfunction isSameFieldInstance(a, b) {\n    return a.path === b.path && a.location === b.location;\n}\nfunction expandField(req, field, location) {\n    const originalPath = field;\n    const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n    const paths = [];\n    expandPath(req[location], pathToExpand, paths);\n    return paths.map(path => {\n        const value = path === '' ? req[location] : _.get(req[location], path);\n        return {\n            location,\n            path,\n            originalPath,\n            value,\n            originalValue: value,\n        };\n    });\n}\nfunction expandPath(object, path, accumulator) {\n    const segments = _.toPath(path);\n    const wildcardPos = segments.indexOf('*');\n    if (wildcardPos > -1) {\n        const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n        if (!subObject || !_.isObjectLike(subObject)) {\n            return;\n        }\n        Object.keys(subObject)\n            .map(key => segments\n            // Before the *\n            .slice(0, wildcardPos)\n            // The part that the * matched\n            // #1205 - Escape a legit field \"*\" to avoid it from causing infinite recursion\n            .concat(key === '*' ? `\\\\${key}` : key)\n            // After the *\n            .concat(segments.slice(wildcardPos + 1)))\n            .forEach(subPath => {\n            expandPath(object, subPath, accumulator);\n        });\n    }\n    else {\n        const reconstructedPath = reconstructFieldPath(segments);\n        accumulator.push(reconstructedPath);\n    }\n}\n/**\n * Reconstructs a field path from a list of path segments.\n *\n * Most segments will be concatenated by a dot, for example `['foo', 'bar']` becomes `foo.bar`.\n * However, a numeric segment will be wrapped in brackets to match regular JS array syntax:\n *\n * ```\n * reconstructFieldPath(['foo', 0, 'bar']) // foo[0].bar\n * ```\n *\n * Segments which have a special character such as `.` will be wrapped in brackets and quotes,\n * which also matches JS syntax for objects with such keys.\n *\n * ```\n * reconstructFieldPath(['foo', 'bar.baz', 'qux']) // foo[\"bar.baz\"].qux\n * ```\n */\nfunction reconstructFieldPath(segments) {\n    return segments.reduce((prev, segment) => {\n        let part = '';\n        segment = segment === '\\\\*' ? '*' : segment;\n        // TODO: Handle brackets?\n        if (segment.includes('.')) {\n            // Special char key access\n            part = `[\"${segment}\"]`;\n        }\n        else if (/^\\d+$/.test(segment)) {\n            // Index access\n            part = `[${segment}]`;\n        }\n        else if (prev) {\n            // Object key access\n            part = `.${segment}`;\n        }\n        else {\n            // Top level key\n            part = segment;\n        }\n        return prev + part;\n    }, '');\n}\nexports.reconstructFieldPath = reconstructFieldPath;\n"]},"metadata":{},"sourceType":"script"}