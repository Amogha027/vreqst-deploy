{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpressValidator = void 0;\n\nvar matched_data_1 = require(\"./matched-data\");\n\nvar check_1 = require(\"./middlewares/check\");\n\nvar exact_1 = require(\"./middlewares/exact\");\n\nvar one_of_1 = require(\"./middlewares/one-of\");\n\nvar schema_1 = require(\"./middlewares/schema\");\n\nvar validation_result_1 = require(\"./validation-result\");\n/* eslint-enable no-use-before-define */\n\n\nvar ExpressValidator =\n/*#__PURE__*/\nfunction () {\n  function ExpressValidator(validators, sanitizers, options) {\n    var _this = this;\n\n    _classCallCheck(this, ExpressValidator);\n\n    this.validators = validators;\n    this.sanitizers = sanitizers;\n    this.options = options;\n    /**\n     * Creates a middleware/validation chain for one or more fields that may be located in\n     * any of the following:\n     *\n     * - `req.body`\n     * - `req.cookies`\n     * - `req.headers`\n     * - `req.params`\n     * - `req.query`\n     *\n     * @param fields  a string or array of field names to validate/sanitize\n     * @param message an error message to use when failed validations don't specify a custom message.\n     *                Defaults to `Invalid Value`.\n     */\n\n    this.check = this.buildCheckFunction(['body', 'cookies', 'headers', 'params', 'query']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.body`.\n     */\n\n    this.body = this.buildCheckFunction(['body']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.cookies`.\n     */\n\n    this.cookie = this.buildCheckFunction(['cookies']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.headers`.\n     */\n\n    this.header = this.buildCheckFunction(['headers']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.params`.\n     */\n\n    this.param = this.buildCheckFunction(['params']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.query`.\n     */\n\n    this.query = this.buildCheckFunction(['query']);\n    /**\n     * Checks whether the request contains exactly only those fields that have been validated.\n     *\n     * This method is here for convenience; it does exactly the same as `checkExact`.\n     *\n     * @see {@link checkExact}\n     */\n\n    this.checkExact = exact_1.checkExact;\n    /**\n     * Creates an express middleware with validations for multiple fields at once in the form of\n     * a schema object.\n     *\n     * @param schema the schema to validate.\n     * @param defaultLocations which locations to validate in each field. Defaults to every location.\n     */\n    // NOTE: This method references its own type, so the type cast is necessary.\n\n    this.checkSchema = schema_1.createCheckSchema(function () {\n      return _this.createChain.apply(_this, arguments);\n    }, Object.keys(this.validators || {}), Object.keys(this.sanitizers || {}));\n    /**\n     * Extracts the validation errors of an express request using the default error formatter of this\n     * instance.\n     *\n     * @see {@link validationResult()}\n     * @param req the express request object\n     * @returns a `Result` which will by default use the error formatter passed when\n     *          instantiating `ExpressValidator`.\n     */\n\n    this.validationResult = function (req) {\n      var _this$options;\n\n      var formatter = (_this$options = _this.options) === null || _this$options === void 0 ? void 0 : _this$options.errorFormatter;\n      var result = validation_result_1.validationResult(req);\n      return formatter ? result.formatWith(formatter) : result;\n    };\n\n    this.validatorEntries = Object.entries(validators || {});\n    this.sanitizerEntries = Object.entries(sanitizers || {}); // Can't use arrow function in the declaration of `buildCheckFunction` due to the following\n    // error which only happens when tests are run without Jest cache (so CI only):\n    //\n    //    'buildCheckFunction' implicitly has type 'any' because it does not have a type annotation\n    //    and is referenced directly or indirectly in its own initializer\n\n    this.buildCheckFunction = this.buildCheckFunction.bind(this);\n  }\n\n  _createClass(ExpressValidator, [{\n    key: \"createChain\",\n    value: function createChain() {\n      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var locations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var message = arguments.length > 2 ? arguments[2] : undefined;\n      var middleware = check_1.check(fields, locations, message);\n      var boundValidators = Object.fromEntries(this.validatorEntries.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            fn = _ref2[1];\n\n        return [name, function () {\n          return middleware.custom(fn);\n        }];\n      }));\n      var boundSanitizers = Object.fromEntries(this.sanitizerEntries.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            name = _ref4[0],\n            fn = _ref4[1];\n\n        return [name, function () {\n          return middleware.customSanitizer(fn);\n        }];\n      }));\n      return Object.assign(middleware, boundValidators, boundSanitizers);\n    }\n  }, {\n    key: \"buildCheckFunction\",\n    value: function buildCheckFunction(locations) {\n      var _this2 = this;\n\n      return function (fields, message) {\n        return _this2.createChain(fields, locations, message);\n      };\n    }\n    /**\n     * Creates a middleware that will ensure that at least one of the given validation chains\n     * or validation chain groups are valid.\n     *\n     * If none are, a single error of type `alternative` is added to the request,\n     * with the errors of each chain made available under the `nestedErrors` property.\n     *\n     * @param chains an array of validation chains to check if are valid.\n     *               If any of the items of `chains` is an array of validation chains, then all of them\n     *               must be valid together for the request to be considered valid.\n     */\n\n  }, {\n    key: \"oneOf\",\n    value: function oneOf(chains, options) {\n      return one_of_1.oneOf(chains, options);\n    }\n    /**\n     * Extracts data validated or sanitized from the request, and builds an object with them.\n     *\n     * This method is a shortcut for `matchedData`; it does nothing different than it.\n     *\n     * @see {@link matchedData}\n     */\n\n  }, {\n    key: \"matchedData\",\n    value: function matchedData(req, options) {\n      return matched_data_1.matchedData(req, options);\n    }\n  }]);\n\n  return ExpressValidator;\n}();\n\nexports.ExpressValidator = ExpressValidator;","map":{"version":3,"sources":["/home/amogha/btp/deploy/deployed/vreqst/node_modules/express-validator/src/express-validator.js"],"names":["Object","defineProperty","exports","value","ExpressValidator","matched_data_1","require","check_1","exact_1","one_of_1","schema_1","validation_result_1","validators","sanitizers","options","check","buildCheckFunction","body","cookie","header","param","query","checkExact","checkSchema","createCheckSchema","createChain","keys","validationResult","req","formatter","errorFormatter","result","formatWith","validatorEntries","entries","sanitizerEntries","bind","fields","locations","message","middleware","boundValidators","fromEntries","map","name","fn","custom","boundSanitizers","customSanitizer","assign","chains","oneOf","matchedData"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpressValidator = void 0;\nconst matched_data_1 = require(\"./matched-data\");\nconst check_1 = require(\"./middlewares/check\");\nconst exact_1 = require(\"./middlewares/exact\");\nconst one_of_1 = require(\"./middlewares/one-of\");\nconst schema_1 = require(\"./middlewares/schema\");\nconst validation_result_1 = require(\"./validation-result\");\n/* eslint-enable no-use-before-define */\nclass ExpressValidator {\n    constructor(validators, sanitizers, options) {\n        this.validators = validators;\n        this.sanitizers = sanitizers;\n        this.options = options;\n        /**\n         * Creates a middleware/validation chain for one or more fields that may be located in\n         * any of the following:\n         *\n         * - `req.body`\n         * - `req.cookies`\n         * - `req.headers`\n         * - `req.params`\n         * - `req.query`\n         *\n         * @param fields  a string or array of field names to validate/sanitize\n         * @param message an error message to use when failed validations don't specify a custom message.\n         *                Defaults to `Invalid Value`.\n         */\n        this.check = this.buildCheckFunction(['body', 'cookies', 'headers', 'params', 'query']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.body`.\n         */\n        this.body = this.buildCheckFunction(['body']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.cookies`.\n         */\n        this.cookie = this.buildCheckFunction(['cookies']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.headers`.\n         */\n        this.header = this.buildCheckFunction(['headers']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.params`.\n         */\n        this.param = this.buildCheckFunction(['params']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.query`.\n         */\n        this.query = this.buildCheckFunction(['query']);\n        /**\n         * Checks whether the request contains exactly only those fields that have been validated.\n         *\n         * This method is here for convenience; it does exactly the same as `checkExact`.\n         *\n         * @see {@link checkExact}\n         */\n        this.checkExact = exact_1.checkExact;\n        /**\n         * Creates an express middleware with validations for multiple fields at once in the form of\n         * a schema object.\n         *\n         * @param schema the schema to validate.\n         * @param defaultLocations which locations to validate in each field. Defaults to every location.\n         */\n        // NOTE: This method references its own type, so the type cast is necessary.\n        this.checkSchema = schema_1.createCheckSchema((...args) => this.createChain(...args), Object.keys(this.validators || {}), Object.keys(this.sanitizers || {}));\n        /**\n         * Extracts the validation errors of an express request using the default error formatter of this\n         * instance.\n         *\n         * @see {@link validationResult()}\n         * @param req the express request object\n         * @returns a `Result` which will by default use the error formatter passed when\n         *          instantiating `ExpressValidator`.\n         */\n        this.validationResult = (req) => {\n            const formatter = this.options?.errorFormatter;\n            const result = validation_result_1.validationResult(req);\n            return formatter ? result.formatWith(formatter) : result;\n        };\n        this.validatorEntries = Object.entries(validators || {});\n        this.sanitizerEntries = Object.entries(sanitizers || {});\n        // Can't use arrow function in the declaration of `buildCheckFunction` due to the following\n        // error which only happens when tests are run without Jest cache (so CI only):\n        //\n        //    'buildCheckFunction' implicitly has type 'any' because it does not have a type annotation\n        //    and is referenced directly or indirectly in its own initializer\n        this.buildCheckFunction = this.buildCheckFunction.bind(this);\n    }\n    createChain(fields = '', locations = [], message) {\n        const middleware = check_1.check(fields, locations, message);\n        const boundValidators = Object.fromEntries(this.validatorEntries.map(([name, fn]) => [name, () => middleware.custom(fn)]));\n        const boundSanitizers = Object.fromEntries(this.sanitizerEntries.map(([name, fn]) => [name, () => middleware.customSanitizer(fn)]));\n        return Object.assign(middleware, boundValidators, boundSanitizers);\n    }\n    buildCheckFunction(locations) {\n        return (fields, message) => this.createChain(fields, locations, message);\n    }\n    /**\n     * Creates a middleware that will ensure that at least one of the given validation chains\n     * or validation chain groups are valid.\n     *\n     * If none are, a single error of type `alternative` is added to the request,\n     * with the errors of each chain made available under the `nestedErrors` property.\n     *\n     * @param chains an array of validation chains to check if are valid.\n     *               If any of the items of `chains` is an array of validation chains, then all of them\n     *               must be valid together for the request to be considered valid.\n     */\n    oneOf(chains, options) {\n        return one_of_1.oneOf(chains, options);\n    }\n    /**\n     * Extracts data validated or sanitized from the request, and builds an object with them.\n     *\n     * This method is a shortcut for `matchedData`; it does nothing different than it.\n     *\n     * @see {@link matchedData}\n     */\n    matchedData(req, options) {\n        return matched_data_1.matchedData(req, options);\n    }\n}\nexports.ExpressValidator = ExpressValidator;\n"]},"metadata":{},"sourceType":"script"}