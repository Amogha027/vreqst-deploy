{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.query = exports.param = exports.header = exports.cookie = exports.body = exports.check = exports.buildCheckFunction = void 0;\n\nvar check_1 = require(\"./check\");\n/**\n * Creates a variant of `check()` that checks the given request locations.\n *\n * @example\n *  const checkBodyAndQuery = buildCheckFunction(['body', 'query']);\n */\n\n\nfunction buildCheckFunction(locations) {\n  return function (fields, message) {\n    return check_1.check(fields, locations, message);\n  };\n}\n\nexports.buildCheckFunction = buildCheckFunction;\n/**\n * Creates a middleware/validation chain for one or more fields that may be located in\n * any of the following:\n *\n * - `req.body`\n * - `req.cookies`\n * - `req.headers`\n * - `req.params`\n * - `req.query`\n *\n * @param fields  a string or array of field names to validate/sanitize\n * @param message an error message to use when failed validations don't specify a custom message.\n *                Defaults to `Invalid Value`.\n */\n\nexports.check = buildCheckFunction(['body', 'cookies', 'headers', 'params', 'query']);\n/**\n * Same as {@link check()}, but only validates `req.body`.\n */\n\nexports.body = buildCheckFunction(['body']);\n/**\n * Same as {@link check()}, but only validates `req.cookies`.\n */\n\nexports.cookie = buildCheckFunction(['cookies']);\n/**\n * Same as {@link check()}, but only validates `req.headers`.\n */\n\nexports.header = buildCheckFunction(['headers']);\n/**\n * Same as {@link check()}, but only validates `req.params`.\n */\n\nexports.param = buildCheckFunction(['params']);\n/**\n * Same as {@link check()}, but only validates `req.query`.\n */\n\nexports.query = buildCheckFunction(['query']);","map":{"version":3,"sources":["/home/amogha/Documents/sem-6/btp-1/deploy/deployed/vreqst/node_modules/express-validator/src/middlewares/validation-chain-builders.js"],"names":["Object","defineProperty","exports","value","query","param","header","cookie","body","check","buildCheckFunction","check_1","require","locations","fields","message"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACK,MAAR,GAAiBL,OAAO,CAACM,IAAR,GAAeN,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACQ,kBAAR,GAA6B,KAAK,CAAnI;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;AACA;;;;;;;;AAMA,SAASF,kBAAT,CAA4BG,SAA5B,EAAuC;AACnC,SAAO,UAACC,MAAD,EAASC,OAAT;AAAA,WAAqBJ,OAAO,CAACF,KAAR,CAAcK,MAAd,EAAsBD,SAAtB,EAAiCE,OAAjC,CAArB;AAAA,GAAP;AACH;;AACDb,OAAO,CAACQ,kBAAR,GAA6BA,kBAA7B;AACA;;;;;;;;;;;;;;;AAcAR,OAAO,CAACO,KAAR,GAAgBC,kBAAkB,CAAC,CAAC,MAAD,EAAS,SAAT,EAAoB,SAApB,EAA+B,QAA/B,EAAyC,OAAzC,CAAD,CAAlC;AACA;;;;AAGAR,OAAO,CAACM,IAAR,GAAeE,kBAAkB,CAAC,CAAC,MAAD,CAAD,CAAjC;AACA;;;;AAGAR,OAAO,CAACK,MAAR,GAAiBG,kBAAkB,CAAC,CAAC,SAAD,CAAD,CAAnC;AACA;;;;AAGAR,OAAO,CAACI,MAAR,GAAiBI,kBAAkB,CAAC,CAAC,SAAD,CAAD,CAAnC;AACA;;;;AAGAR,OAAO,CAACG,KAAR,GAAgBK,kBAAkB,CAAC,CAAC,QAAD,CAAD,CAAlC;AACA;;;;AAGAR,OAAO,CAACE,KAAR,GAAgBM,kBAAkB,CAAC,CAAC,OAAD,CAAD,CAAlC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.query = exports.param = exports.header = exports.cookie = exports.body = exports.check = exports.buildCheckFunction = void 0;\nconst check_1 = require(\"./check\");\n/**\n * Creates a variant of `check()` that checks the given request locations.\n *\n * @example\n *  const checkBodyAndQuery = buildCheckFunction(['body', 'query']);\n */\nfunction buildCheckFunction(locations) {\n    return (fields, message) => check_1.check(fields, locations, message);\n}\nexports.buildCheckFunction = buildCheckFunction;\n/**\n * Creates a middleware/validation chain for one or more fields that may be located in\n * any of the following:\n *\n * - `req.body`\n * - `req.cookies`\n * - `req.headers`\n * - `req.params`\n * - `req.query`\n *\n * @param fields  a string or array of field names to validate/sanitize\n * @param message an error message to use when failed validations don't specify a custom message.\n *                Defaults to `Invalid Value`.\n */\nexports.check = buildCheckFunction(['body', 'cookies', 'headers', 'params', 'query']);\n/**\n * Same as {@link check()}, but only validates `req.body`.\n */\nexports.body = buildCheckFunction(['body']);\n/**\n * Same as {@link check()}, but only validates `req.cookies`.\n */\nexports.cookie = buildCheckFunction(['cookies']);\n/**\n * Same as {@link check()}, but only validates `req.headers`.\n */\nexports.header = buildCheckFunction(['headers']);\n/**\n * Same as {@link check()}, but only validates `req.params`.\n */\nexports.param = buildCheckFunction(['params']);\n/**\n * Same as {@link check()}, but only validates `req.query`.\n */\nexports.query = buildCheckFunction(['query']);\n"]},"metadata":{},"sourceType":"script"}