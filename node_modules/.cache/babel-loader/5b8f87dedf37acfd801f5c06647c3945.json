{"ast":null,"code":"import _slicedToArray from \"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport equal from 'fast-deep-equal';\nimport { useCallback, useState } from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect.js';\n/**\n *\n * @param monitor The monitor to collect state from\n * @param collect The collecting function\n * @param onUpdate A method to invoke when updates occur\n */\n\nexport function useCollector(monitor, collect, onUpdate) {\n  var _useState = useState(function () {\n    return collect(monitor);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      collected = _useState2[0],\n      setCollected = _useState2[1];\n\n  var updateCollected = useCallback(function () {\n    var nextValue = collect(monitor); // This needs to be a deep-equality check because some monitor-collected values\n    // include XYCoord objects that may be equivalent, but do not have instance equality.\n\n    if (!equal(collected, nextValue)) {\n      setCollected(nextValue);\n\n      if (onUpdate) {\n        onUpdate();\n      }\n    }\n  }, [collected, monitor, onUpdate]); // update the collected properties after react renders.\n  // Note that the \"Dustbin Stress Test\" fails if this is not\n  // done when the component updates\n\n  useIsomorphicLayoutEffect(updateCollected);\n  return [collected, updateCollected];\n}","map":{"version":3,"sources":["../../src/hooks/useCollector.ts"],"names":["equal","useCallback","useState","useIsomorphicLayoutEffect","useCollector","monitor","collect","onUpdate","collected","setCollected","updateCollected","nextValue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,yBAAT,QAA0C,gCAA1C;AAEA;;;;;;;AAMA,OAAO,SAASC,YAAT,CACNC,OADM,EAENC,OAFM,EAGNC,QAHM,EAIY;AAAA,kBACgBL,QAAQ,CAAC;AAAA,WAAMI,OAAO,CAACD,OAAD,CAAb;AAAA,GAAD,CADxB;AAAA;AAAA,MACXG,SADW;AAAA,MACAC,YADA;;AAGlB,MAAMC,eAAe,GAAGT,WAAW,CAAC,YAAM;AACzC,QAAMU,SAAS,GAAGL,OAAO,CAACD,OAAD,CAAzB,CADyC,CAEzC;AACA;;AACA,QAAI,CAACL,KAAK,CAACQ,SAAD,EAAYG,SAAZ,CAAV,EAAkC;AACjCF,MAAAA,YAAY,CAACE,SAAD,CAAZF;;AACA,UAAIF,QAAJ,EAAc;AACbA,QAAAA,QAAQ;AACR;AACD;AACD,GAVkC,EAUhC,CAACC,SAAD,EAAYH,OAAZ,EAAqBE,QAArB,CAVgC,CAAnC,CAHkB,CAelB;AACA;AACA;;AACAJ,EAAAA,yBAAyB,CAACO,eAAD,CAAzBP;AAEA,SAAO,CAACK,SAAD,EAAYE,eAAZ,CAAP;AACA","sourcesContent":["import equal from 'fast-deep-equal'\nimport { useCallback, useState } from 'react'\n\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect.js'\n\n/**\n *\n * @param monitor The monitor to collect state from\n * @param collect The collecting function\n * @param onUpdate A method to invoke when updates occur\n */\nexport function useCollector<T, S>(\n\tmonitor: T,\n\tcollect: (monitor: T) => S,\n\tonUpdate?: () => void,\n): [S, () => void] {\n\tconst [collected, setCollected] = useState(() => collect(monitor))\n\n\tconst updateCollected = useCallback(() => {\n\t\tconst nextValue = collect(monitor)\n\t\t// This needs to be a deep-equality check because some monitor-collected values\n\t\t// include XYCoord objects that may be equivalent, but do not have instance equality.\n\t\tif (!equal(collected, nextValue)) {\n\t\t\tsetCollected(nextValue)\n\t\t\tif (onUpdate) {\n\t\t\t\tonUpdate()\n\t\t\t}\n\t\t}\n\t}, [collected, monitor, onUpdate])\n\n\t// update the collected properties after react renders.\n\t// Note that the \"Dustbin Stress Test\" fails if this is not\n\t// done when the component updates\n\tuseIsomorphicLayoutEffect(updateCollected)\n\n\treturn [collected, updateCollected]\n}\n"]},"metadata":{},"sourceType":"module"}