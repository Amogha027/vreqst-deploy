{"ast":null,"code":"import _classCallCheck from \"/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { shallowEqual } from '@react-dnd/shallowequal';\nimport { isRef } from './isRef.js';\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js';\nexport var TargetConnector =\n/*#__PURE__*/\nfunction () {\n  _createClass(TargetConnector, [{\n    key: \"reconnect\",\n    value: function reconnect() {\n      // if nothing has changed then don't resubscribe\n      var didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();\n\n      if (didChange) {\n        this.disconnectDropTarget();\n      }\n\n      var dropTarget = this.dropTarget;\n\n      if (!this.handlerId) {\n        return;\n      }\n\n      if (!dropTarget) {\n        this.lastConnectedDropTarget = dropTarget;\n        return;\n      }\n\n      if (didChange) {\n        this.lastConnectedHandlerId = this.handlerId;\n        this.lastConnectedDropTarget = dropTarget;\n        this.lastConnectedDropTargetOptions = this.dropTargetOptions;\n        this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);\n      }\n    }\n  }, {\n    key: \"receiveHandlerId\",\n    value: function receiveHandlerId(newHandlerId) {\n      if (newHandlerId === this.handlerId) {\n        return;\n      }\n\n      this.handlerId = newHandlerId;\n      this.reconnect();\n    }\n  }, {\n    key: \"didHandlerIdChange\",\n    value: function didHandlerIdChange() {\n      return this.lastConnectedHandlerId !== this.handlerId;\n    }\n  }, {\n    key: \"didDropTargetChange\",\n    value: function didDropTargetChange() {\n      return this.lastConnectedDropTarget !== this.dropTarget;\n    }\n  }, {\n    key: \"didOptionsChange\",\n    value: function didOptionsChange() {\n      return !shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);\n    }\n  }, {\n    key: \"disconnectDropTarget\",\n    value: function disconnectDropTarget() {\n      if (this.unsubscribeDropTarget) {\n        this.unsubscribeDropTarget();\n        this.unsubscribeDropTarget = undefined;\n      }\n    }\n  }, {\n    key: \"clearDropTarget\",\n    value: function clearDropTarget() {\n      this.dropTargetRef = null;\n      this.dropTargetNode = null;\n    }\n  }, {\n    key: \"connectTarget\",\n    get: function get() {\n      return this.dropTarget;\n    }\n  }, {\n    key: \"dropTargetOptions\",\n    get: function get() {\n      return this.dropTargetOptionsInternal;\n    },\n    set: function set(options) {\n      this.dropTargetOptionsInternal = options;\n    }\n  }, {\n    key: \"dropTarget\",\n    get: function get() {\n      return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;\n    }\n  }]);\n\n  function TargetConnector(backend) {\n    var _this = this;\n\n    _classCallCheck(this, TargetConnector);\n\n    this.hooks = wrapConnectorHooks({\n      dropTarget: function dropTarget(node, options) {\n        _this.clearDropTarget();\n\n        _this.dropTargetOptions = options;\n\n        if (isRef(node)) {\n          _this.dropTargetRef = node;\n        } else {\n          _this.dropTargetNode = node;\n        }\n\n        _this.reconnect();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dropTargetRef = null;\n    this.dropTargetOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDropTarget = null;\n    this.lastConnectedDropTargetOptions = null;\n    this.backend = backend;\n  }\n\n  return TargetConnector;\n}();","map":{"version":3,"sources":["../../src/internals/TargetConnector.ts"],"names":["shallowEqual","isRef","wrapConnectorHooks","TargetConnector","hooks","dropTarget","node","options","clearDropTarget","dropTargetOptions","dropTargetRef","dropTargetNode","reconnect","handlerId","dropTargetOptionsInternal","lastConnectedHandlerId","lastConnectedDropTarget","lastConnectedDropTargetOptions","backend","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","unsubscribeDropTarget","connectDropTarget","newHandlerId","undefined","current"],"mappings":"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","sourcesContent":["import { shallowEqual } from '@react-dnd/shallowequal'\nimport type { Backend, Identifier, Unsubscribe } from 'dnd-core'\nimport type { RefObject } from 'react'\n\nimport type { DropTargetOptions } from '../types/index.js'\nimport { isRef } from './isRef.js'\nimport type { Connector } from './SourceConnector.js'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\n\nexport class TargetConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdropTarget: (node: any, options: DropTargetOptions) => {\n\t\t\tthis.clearDropTarget()\n\t\t\tthis.dropTargetOptions = options\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dropTargetRef = node\n\t\t\t} else {\n\t\t\t\tthis.dropTargetNode = node\n\t\t\t}\n\t\t\tthis.reconnect()\n\t\t},\n\t})\n\n\tprivate handlerId: Identifier | null = null\n\t// The drop target may either be attached via ref or connect function\n\tprivate dropTargetRef: RefObject<any> | null = null\n\tprivate dropTargetNode: any\n\tprivate dropTargetOptionsInternal: DropTargetOptions | null = null\n\tprivate unsubscribeDropTarget: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDropTarget: any = null\n\tprivate lastConnectedDropTargetOptions: DropTargetOptions | null = null\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dropTarget\n\t}\n\n\tpublic reconnect(): void {\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didDropTargetChange() ||\n\t\t\tthis.didOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDropTarget()\n\t\t}\n\n\t\tconst dropTarget = this.dropTarget\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dropTarget) {\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\tthis.lastConnectedDropTargetOptions = this.dropTargetOptions\n\n\t\t\tthis.unsubscribeDropTarget = this.backend.connectDropTarget(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdropTarget,\n\t\t\t\tthis.dropTargetOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (newHandlerId === this.handlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get dropTargetOptions(): DropTargetOptions {\n\t\treturn this.dropTargetOptionsInternal\n\t}\n\tpublic set dropTargetOptions(options: DropTargetOptions) {\n\t\tthis.dropTargetOptionsInternal = options\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didDropTargetChange(): boolean {\n\t\treturn this.lastConnectedDropTarget !== this.dropTarget\n\t}\n\n\tprivate didOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDropTargetOptions,\n\t\t\tthis.dropTargetOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDropTarget() {\n\t\tif (this.unsubscribeDropTarget) {\n\t\t\tthis.unsubscribeDropTarget()\n\t\t\tthis.unsubscribeDropTarget = undefined\n\t\t}\n\t}\n\n\tprivate get dropTarget() {\n\t\treturn (\n\t\t\tthis.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current)\n\t\t)\n\t}\n\n\tprivate clearDropTarget() {\n\t\tthis.dropTargetRef = null\n\t\tthis.dropTargetNode = null\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}