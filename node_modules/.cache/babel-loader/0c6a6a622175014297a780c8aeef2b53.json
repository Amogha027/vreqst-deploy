{"ast":null,"code":"/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */\nexport function add(a, b) {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y\n  };\n}\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */\n\nexport function subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */\n\nexport function getSourceClientOffset(state) {\n  var clientOffset = state.clientOffset,\n      initialClientOffset = state.initialClientOffset,\n      initialSourceClientOffset = state.initialSourceClientOffset;\n\n  if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n    return null;\n  }\n\n  return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\n}\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */\n\nexport function getDifferenceFromInitialOffset(state) {\n  var clientOffset = state.clientOffset,\n      initialClientOffset = state.initialClientOffset;\n\n  if (!clientOffset || !initialClientOffset) {\n    return null;\n  }\n\n  return subtract(clientOffset, initialClientOffset);\n}","map":{"version":3,"sources":["../../src/utils/coords.ts"],"names":["add","a","b","x","y","subtract","getSourceClientOffset","state","clientOffset","initialClientOffset","initialSourceClientOffset","getDifferenceFromInitialOffset"],"mappings":"AAGA;;;;;AAKA,OAAO,SAASA,GAAT,CAAaC,CAAb,EAAyBC,CAAzB,EAA8C;AACpD,SAAO;AACNC,IAAAA,CAAC,EAAEF,CAAC,CAACE,CAAFF,GAAMC,CAAC,CAACC,CADL;AAENC,IAAAA,CAAC,EAAEH,CAAC,CAACG,CAAFH,GAAMC,CAAC,CAACE;AAFL,GAAP;AAIA;AAED;;;;;;AAKA,OAAO,SAASC,QAAT,CAAkBJ,CAAlB,EAA8BC,CAA9B,EAAmD;AACzD,SAAO;AACNC,IAAAA,CAAC,EAAEF,CAAC,CAACE,CAAFF,GAAMC,CAAC,CAACC,CADL;AAENC,IAAAA,CAAC,EAAEH,CAAC,CAACG,CAAFH,GAAMC,CAAC,CAACE;AAFL,GAAP;AAIA;AAED;;;;;;;;;AAQA,OAAO,SAASE,qBAAT,CAA+BC,KAA/B,EAA6D;AAAA,MAC3DC,YAD2D,GACMD,KADN,CAC3DC,YAD2D;AAAA,MAC7CC,mBAD6C,GACMF,KADN,CAC7CE,mBAD6C;AAAA,MACxBC,yBADwB,GACMH,KADN,CACxBG,yBADwB;;AAEnE,MAAI,CAACF,YAAD,IAAiB,CAACC,mBAAlB,IAAyC,CAACC,yBAA9C,EAAyE;AACxE,WAAO,IAAP;AACA;;AACD,SAAOL,QAAQ,CACdL,GAAG,CAACQ,YAAD,EAAeE,yBAAf,CADW,EAEdD,mBAFc,CAAf;AAIA;AAED;;;;;;AAKA,OAAO,SAASE,8BAAT,CAAwCJ,KAAxC,EAAsE;AAAA,MACpEC,YADoE,GAC9BD,KAD8B,CACpEC,YADoE;AAAA,MACtDC,mBADsD,GAC9BF,KAD8B,CACtDE,mBADsD;;AAE5E,MAAI,CAACD,YAAD,IAAiB,CAACC,mBAAtB,EAA2C;AAC1C,WAAO,IAAP;AACA;;AACD,SAAOJ,QAAQ,CAACG,YAAD,EAAeC,mBAAf,CAAf;AACA","sourcesContent":["import type { XYCoord } from '../interfaces.js'\nimport type { State } from '../reducers/dragOffset.js'\n\n/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */\nexport function add(a: XYCoord, b: XYCoord): XYCoord {\n\treturn {\n\t\tx: a.x + b.x,\n\t\ty: a.y + b.y,\n\t}\n}\n\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */\nexport function subtract(a: XYCoord, b: XYCoord): XYCoord {\n\treturn {\n\t\tx: a.x - b.x,\n\t\ty: a.y - b.y,\n\t}\n}\n\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */\nexport function getSourceClientOffset(state: State): XYCoord | null {\n\tconst { clientOffset, initialClientOffset, initialSourceClientOffset } = state\n\tif (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n\t\treturn null\n\t}\n\treturn subtract(\n\t\tadd(clientOffset, initialSourceClientOffset),\n\t\tinitialClientOffset,\n\t)\n}\n\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */\nexport function getDifferenceFromInitialOffset(state: State): XYCoord | null {\n\tconst { clientOffset, initialClientOffset } = state\n\tif (!clientOffset || !initialClientOffset) {\n\t\treturn null\n\t}\n\treturn subtract(clientOffset, initialClientOffset)\n}\n"]},"metadata":{},"sourceType":"module"}