{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIBAN;\nexports.locales = void 0;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * List of country codes with\n * corresponding IBAN regular expression\n * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n */\n\n\nvar ibanRegexThroughCountryCode = {\n  AD: /^(AD[0-9]{2})\\d{8}[A-Z0-9]{12}$/,\n  AE: /^(AE[0-9]{2})\\d{3}\\d{16}$/,\n  AL: /^(AL[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  AT: /^(AT[0-9]{2})\\d{16}$/,\n  AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  BA: /^(BA[0-9]{2})\\d{16}$/,\n  BE: /^(BE[0-9]{2})\\d{12}$/,\n  BG: /^(BG[0-9]{2})[A-Z]{4}\\d{6}[A-Z0-9]{8}$/,\n  BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,\n  BR: /^(BR[0-9]{2})\\d{23}[A-Z]{1}[A-Z0-9]{1}$/,\n  BY: /^(BY[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  CH: /^(CH[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  CR: /^(CR[0-9]{2})\\d{18}$/,\n  CY: /^(CY[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  CZ: /^(CZ[0-9]{2})\\d{20}$/,\n  DE: /^(DE[0-9]{2})\\d{18}$/,\n  DK: /^(DK[0-9]{2})\\d{14}$/,\n  DO: /^(DO[0-9]{2})[A-Z]{4}\\d{20}$/,\n  EE: /^(EE[0-9]{2})\\d{16}$/,\n  EG: /^(EG[0-9]{2})\\d{25}$/,\n  ES: /^(ES[0-9]{2})\\d{20}$/,\n  FI: /^(FI[0-9]{2})\\d{14}$/,\n  FO: /^(FO[0-9]{2})\\d{14}$/,\n  FR: /^(FR[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  GB: /^(GB[0-9]{2})[A-Z]{4}\\d{14}$/,\n  GE: /^(GE[0-9]{2})[A-Z0-9]{2}\\d{16}$/,\n  GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,\n  GL: /^(GL[0-9]{2})\\d{14}$/,\n  GR: /^(GR[0-9]{2})\\d{7}[A-Z0-9]{16}$/,\n  GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,\n  HR: /^(HR[0-9]{2})\\d{17}$/,\n  HU: /^(HU[0-9]{2})\\d{24}$/,\n  IE: /^(IE[0-9]{2})[A-Z0-9]{4}\\d{14}$/,\n  IL: /^(IL[0-9]{2})\\d{19}$/,\n  IQ: /^(IQ[0-9]{2})[A-Z]{4}\\d{15}$/,\n  IR: /^(IR[0-9]{2})0\\d{2}0\\d{18}$/,\n  IS: /^(IS[0-9]{2})\\d{22}$/,\n  IT: /^(IT[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  JO: /^(JO[0-9]{2})[A-Z]{4}\\d{22}$/,\n  KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,\n  KZ: /^(KZ[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LB: /^(LB[0-9]{2})\\d{4}[A-Z0-9]{20}$/,\n  LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,\n  LI: /^(LI[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  LT: /^(LT[0-9]{2})\\d{16}$/,\n  LU: /^(LU[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,\n  MA: /^(MA[0-9]{26})$/,\n  MC: /^(MC[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,\n  ME: /^(ME[0-9]{2})\\d{18}$/,\n  MK: /^(MK[0-9]{2})\\d{3}[A-Z0-9]{10}\\d{2}$/,\n  MR: /^(MR[0-9]{2})\\d{23}$/,\n  MT: /^(MT[0-9]{2})[A-Z]{4}\\d{5}[A-Z0-9]{18}$/,\n  MU: /^(MU[0-9]{2})[A-Z]{4}\\d{19}[A-Z]{3}$/,\n  MZ: /^(MZ[0-9]{2})\\d{21}$/,\n  NL: /^(NL[0-9]{2})[A-Z]{4}\\d{10}$/,\n  NO: /^(NO[0-9]{2})\\d{11}$/,\n  PK: /^(PK[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  PL: /^(PL[0-9]{2})\\d{24}$/,\n  PS: /^(PS[0-9]{2})[A-Z0-9]{4}\\d{21}$/,\n  PT: /^(PT[0-9]{2})\\d{21}$/,\n  QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\n  RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,\n  RS: /^(RS[0-9]{2})\\d{18}$/,\n  SA: /^(SA[0-9]{2})\\d{2}[A-Z0-9]{18}$/,\n  SC: /^(SC[0-9]{2})[A-Z]{4}\\d{20}[A-Z]{3}$/,\n  SE: /^(SE[0-9]{2})\\d{20}$/,\n  SI: /^(SI[0-9]{2})\\d{15}$/,\n  SK: /^(SK[0-9]{2})\\d{20}$/,\n  SM: /^(SM[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  SV: /^(SV[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  TL: /^(TL[0-9]{2})\\d{19}$/,\n  TN: /^(TN[0-9]{2})\\d{20}$/,\n  TR: /^(TR[0-9]{2})\\d{5}[A-Z0-9]{17}$/,\n  UA: /^(UA[0-9]{2})\\d{6}[A-Z0-9]{19}$/,\n  VA: /^(VA[0-9]{2})\\d{18}$/,\n  VG: /^(VG[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  XK: /^(XK[0-9]{2})\\d{16}$/\n};\n/**\n * Check if the country codes passed are valid using the\n * ibanRegexThroughCountryCode as a reference\n *\n * @param {array} countryCodeArray\n * @return {boolean}\n */\n\nfunction hasOnlyValidCountryCodes(countryCodeArray) {\n  var countryCodeArrayFilteredWithObjectIbanCode = countryCodeArray.filter(function (countryCode) {\n    return !(countryCode in ibanRegexThroughCountryCode);\n  });\n\n  if (countryCodeArrayFilteredWithObjectIbanCode.length > 0) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Check whether string has correct universal IBAN format\n * The IBAN consists of up to 34 alphanumeric characters, as follows:\n * Country Code using ISO 3166-1 alpha-2, two letters\n * check digits, two digits and\n * Basic Bank Account Number (BBAN), up to 30 alphanumeric characters.\n * NOTE: Permitted IBAN characters are: digits [0-9] and the 26 latin alphabetic [A-Z]\n *\n * @param {string} str - string under validation\n * @param {object} options - object to pass the countries to be either whitelisted or blacklisted\n * @return {boolean}\n */\n\n\nfunction hasValidIbanFormat(str, options) {\n  // Strip white spaces and hyphens\n  var strippedStr = str.replace(/[\\s\\-]+/gi, '').toUpperCase();\n  var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();\n  var isoCountryCodeInIbanRegexCodeObject = isoCountryCode in ibanRegexThroughCountryCode;\n\n  if (options.whitelist) {\n    if (!hasOnlyValidCountryCodes(options.whitelist)) {\n      return false;\n    }\n\n    var isoCountryCodeInWhiteList = options.whitelist.includes(isoCountryCode);\n\n    if (!isoCountryCodeInWhiteList) {\n      return false;\n    }\n  }\n\n  if (options.blacklist) {\n    var isoCountryCodeInBlackList = options.blacklist.includes(isoCountryCode);\n\n    if (isoCountryCodeInBlackList) {\n      return false;\n    }\n  }\n\n  return isoCountryCodeInIbanRegexCodeObject && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);\n}\n/**\n   * Check whether string has valid IBAN Checksum\n   * by performing basic mod-97 operation and\n   * the remainder should equal 1\n   * -- Start by rearranging the IBAN by moving the four initial characters to the end of the string\n   * -- Replace each letter in the string with two digits, A -> 10, B = 11, Z = 35\n   * -- Interpret the string as a decimal integer and\n   * -- compute the remainder on division by 97 (mod 97)\n   * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n   *\n   * @param {string} str\n   * @return {boolean}\n   */\n\n\nfunction hasValidIbanChecksum(str) {\n  var strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic\n\n  var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);\n  var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function (char) {\n    return char.charCodeAt(0) - 55;\n  });\n  var remainder = alphaCapsReplacedWithDigits.match(/\\d{1,7}/g).reduce(function (acc, value) {\n    return Number(acc + value) % 97;\n  }, '');\n  return remainder === 1;\n}\n\nfunction isIBAN(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(str);\n  return hasValidIbanFormat(str, options) && hasValidIbanChecksum(str);\n}\n\nvar locales = Object.keys(ibanRegexThroughCountryCode);\nexports.locales = locales;","map":{"version":3,"sources":["/home/amogha/Documents/sem-6/btp-1/deploy/deployed/vreqst/node_modules/validator/lib/isIBAN.js"],"names":["Object","defineProperty","exports","value","default","isIBAN","locales","_assertString","_interopRequireDefault","require","obj","__esModule","ibanRegexThroughCountryCode","AD","AE","AL","AT","AZ","BA","BE","BG","BH","BR","BY","CH","CR","CY","CZ","DE","DK","DO","EE","EG","ES","FI","FO","FR","GB","GE","GI","GL","GR","GT","HR","HU","IE","IL","IQ","IR","IS","IT","JO","KW","KZ","LB","LC","LI","LT","LU","LV","MA","MC","MD","ME","MK","MR","MT","MU","MZ","NL","NO","PK","PL","PS","PT","QA","RO","RS","SA","SC","SE","SI","SK","SM","SV","TL","TN","TR","UA","VA","VG","XK","hasOnlyValidCountryCodes","countryCodeArray","countryCodeArrayFilteredWithObjectIbanCode","filter","countryCode","length","hasValidIbanFormat","str","options","strippedStr","replace","toUpperCase","isoCountryCode","slice","isoCountryCodeInIbanRegexCodeObject","whitelist","isoCountryCodeInWhiteList","includes","blacklist","isoCountryCodeInBlackList","test","hasValidIbanChecksum","rearranged","alphaCapsReplacedWithDigits","char","charCodeAt","remainder","match","reduce","acc","Number","arguments","undefined","keys"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIBAN;\nexports.locales = void 0;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * List of country codes with\n * corresponding IBAN regular expression\n * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n */\nvar ibanRegexThroughCountryCode = {\n  AD: /^(AD[0-9]{2})\\d{8}[A-Z0-9]{12}$/,\n  AE: /^(AE[0-9]{2})\\d{3}\\d{16}$/,\n  AL: /^(AL[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  AT: /^(AT[0-9]{2})\\d{16}$/,\n  AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  BA: /^(BA[0-9]{2})\\d{16}$/,\n  BE: /^(BE[0-9]{2})\\d{12}$/,\n  BG: /^(BG[0-9]{2})[A-Z]{4}\\d{6}[A-Z0-9]{8}$/,\n  BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,\n  BR: /^(BR[0-9]{2})\\d{23}[A-Z]{1}[A-Z0-9]{1}$/,\n  BY: /^(BY[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  CH: /^(CH[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  CR: /^(CR[0-9]{2})\\d{18}$/,\n  CY: /^(CY[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  CZ: /^(CZ[0-9]{2})\\d{20}$/,\n  DE: /^(DE[0-9]{2})\\d{18}$/,\n  DK: /^(DK[0-9]{2})\\d{14}$/,\n  DO: /^(DO[0-9]{2})[A-Z]{4}\\d{20}$/,\n  EE: /^(EE[0-9]{2})\\d{16}$/,\n  EG: /^(EG[0-9]{2})\\d{25}$/,\n  ES: /^(ES[0-9]{2})\\d{20}$/,\n  FI: /^(FI[0-9]{2})\\d{14}$/,\n  FO: /^(FO[0-9]{2})\\d{14}$/,\n  FR: /^(FR[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  GB: /^(GB[0-9]{2})[A-Z]{4}\\d{14}$/,\n  GE: /^(GE[0-9]{2})[A-Z0-9]{2}\\d{16}$/,\n  GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,\n  GL: /^(GL[0-9]{2})\\d{14}$/,\n  GR: /^(GR[0-9]{2})\\d{7}[A-Z0-9]{16}$/,\n  GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,\n  HR: /^(HR[0-9]{2})\\d{17}$/,\n  HU: /^(HU[0-9]{2})\\d{24}$/,\n  IE: /^(IE[0-9]{2})[A-Z0-9]{4}\\d{14}$/,\n  IL: /^(IL[0-9]{2})\\d{19}$/,\n  IQ: /^(IQ[0-9]{2})[A-Z]{4}\\d{15}$/,\n  IR: /^(IR[0-9]{2})0\\d{2}0\\d{18}$/,\n  IS: /^(IS[0-9]{2})\\d{22}$/,\n  IT: /^(IT[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  JO: /^(JO[0-9]{2})[A-Z]{4}\\d{22}$/,\n  KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,\n  KZ: /^(KZ[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LB: /^(LB[0-9]{2})\\d{4}[A-Z0-9]{20}$/,\n  LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,\n  LI: /^(LI[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  LT: /^(LT[0-9]{2})\\d{16}$/,\n  LU: /^(LU[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,\n  MA: /^(MA[0-9]{26})$/,\n  MC: /^(MC[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,\n  ME: /^(ME[0-9]{2})\\d{18}$/,\n  MK: /^(MK[0-9]{2})\\d{3}[A-Z0-9]{10}\\d{2}$/,\n  MR: /^(MR[0-9]{2})\\d{23}$/,\n  MT: /^(MT[0-9]{2})[A-Z]{4}\\d{5}[A-Z0-9]{18}$/,\n  MU: /^(MU[0-9]{2})[A-Z]{4}\\d{19}[A-Z]{3}$/,\n  MZ: /^(MZ[0-9]{2})\\d{21}$/,\n  NL: /^(NL[0-9]{2})[A-Z]{4}\\d{10}$/,\n  NO: /^(NO[0-9]{2})\\d{11}$/,\n  PK: /^(PK[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  PL: /^(PL[0-9]{2})\\d{24}$/,\n  PS: /^(PS[0-9]{2})[A-Z0-9]{4}\\d{21}$/,\n  PT: /^(PT[0-9]{2})\\d{21}$/,\n  QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\n  RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,\n  RS: /^(RS[0-9]{2})\\d{18}$/,\n  SA: /^(SA[0-9]{2})\\d{2}[A-Z0-9]{18}$/,\n  SC: /^(SC[0-9]{2})[A-Z]{4}\\d{20}[A-Z]{3}$/,\n  SE: /^(SE[0-9]{2})\\d{20}$/,\n  SI: /^(SI[0-9]{2})\\d{15}$/,\n  SK: /^(SK[0-9]{2})\\d{20}$/,\n  SM: /^(SM[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  SV: /^(SV[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  TL: /^(TL[0-9]{2})\\d{19}$/,\n  TN: /^(TN[0-9]{2})\\d{20}$/,\n  TR: /^(TR[0-9]{2})\\d{5}[A-Z0-9]{17}$/,\n  UA: /^(UA[0-9]{2})\\d{6}[A-Z0-9]{19}$/,\n  VA: /^(VA[0-9]{2})\\d{18}$/,\n  VG: /^(VG[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  XK: /^(XK[0-9]{2})\\d{16}$/\n};\n/**\n * Check if the country codes passed are valid using the\n * ibanRegexThroughCountryCode as a reference\n *\n * @param {array} countryCodeArray\n * @return {boolean}\n */\n\nfunction hasOnlyValidCountryCodes(countryCodeArray) {\n  var countryCodeArrayFilteredWithObjectIbanCode = countryCodeArray.filter(function (countryCode) {\n    return !(countryCode in ibanRegexThroughCountryCode);\n  });\n\n  if (countryCodeArrayFilteredWithObjectIbanCode.length > 0) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Check whether string has correct universal IBAN format\n * The IBAN consists of up to 34 alphanumeric characters, as follows:\n * Country Code using ISO 3166-1 alpha-2, two letters\n * check digits, two digits and\n * Basic Bank Account Number (BBAN), up to 30 alphanumeric characters.\n * NOTE: Permitted IBAN characters are: digits [0-9] and the 26 latin alphabetic [A-Z]\n *\n * @param {string} str - string under validation\n * @param {object} options - object to pass the countries to be either whitelisted or blacklisted\n * @return {boolean}\n */\n\n\nfunction hasValidIbanFormat(str, options) {\n  // Strip white spaces and hyphens\n  var strippedStr = str.replace(/[\\s\\-]+/gi, '').toUpperCase();\n  var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();\n  var isoCountryCodeInIbanRegexCodeObject = (isoCountryCode in ibanRegexThroughCountryCode);\n\n  if (options.whitelist) {\n    if (!hasOnlyValidCountryCodes(options.whitelist)) {\n      return false;\n    }\n\n    var isoCountryCodeInWhiteList = options.whitelist.includes(isoCountryCode);\n\n    if (!isoCountryCodeInWhiteList) {\n      return false;\n    }\n  }\n\n  if (options.blacklist) {\n    var isoCountryCodeInBlackList = options.blacklist.includes(isoCountryCode);\n\n    if (isoCountryCodeInBlackList) {\n      return false;\n    }\n  }\n\n  return isoCountryCodeInIbanRegexCodeObject && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);\n}\n/**\n   * Check whether string has valid IBAN Checksum\n   * by performing basic mod-97 operation and\n   * the remainder should equal 1\n   * -- Start by rearranging the IBAN by moving the four initial characters to the end of the string\n   * -- Replace each letter in the string with two digits, A -> 10, B = 11, Z = 35\n   * -- Interpret the string as a decimal integer and\n   * -- compute the remainder on division by 97 (mod 97)\n   * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n   *\n   * @param {string} str\n   * @return {boolean}\n   */\n\n\nfunction hasValidIbanChecksum(str) {\n  var strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic\n\n  var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);\n  var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function (char) {\n    return char.charCodeAt(0) - 55;\n  });\n  var remainder = alphaCapsReplacedWithDigits.match(/\\d{1,7}/g).reduce(function (acc, value) {\n    return Number(acc + value) % 97;\n  }, '');\n  return remainder === 1;\n}\n\nfunction isIBAN(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(str);\n  return hasValidIbanFormat(str, options) && hasValidIbanChecksum(str);\n}\n\nvar locales = Object.keys(ibanRegexThroughCountryCode);\nexports.locales = locales;"]},"metadata":{},"sourceType":"script"}