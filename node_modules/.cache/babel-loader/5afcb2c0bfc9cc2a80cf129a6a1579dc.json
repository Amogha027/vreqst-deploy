{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkSchema = exports.createCheckSchema = void 0;\n\nvar _ = require(\"lodash\");\n\nvar chain_1 = require(\"../chain\");\n\nvar utils_1 = require(\"../utils\");\n\nvar check_1 = require(\"./check\");\n\nvar validLocations = ['body', 'cookies', 'headers', 'params', 'query'];\nvar protectedNames = ['errorMessage', 'in', 'optional'];\n/**\n * Factory for a {@link checkSchema()} function which can have extension validators and sanitizers.\n *\n * @see {@link checkSchema()}\n */\n\nfunction createCheckSchema(createChain) {\n  var extraValidators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var extraSanitizers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  /** Type guard for an object entry for a standard validator. */\n  function isStandardValidator(entry) {\n    return (// #664 - explicitly exclude properties which should be set per validator\n      !['not', 'withMessage'].includes(entry[0]) && (entry[0] in chain_1.ValidatorsImpl.prototype || extraValidators.includes(entry[0])) && entry[1]\n    );\n  }\n  /** Type guard for an object entry for a standard sanitizer. */\n\n\n  function isStandardSanitizer(entry) {\n    return (entry[0] in chain_1.SanitizersImpl.prototype || extraSanitizers.includes(entry[0])) && entry[1];\n  }\n  /** Type guard for an object entry for a custom validator. */\n\n\n  function isCustomValidator(entry) {\n    return !isStandardValidator(entry) && !isStandardSanitizer(entry) && typeof entry[1] === 'object' && entry[1] && typeof entry[1].custom === 'function';\n  }\n  /** Type guard for an object entry for a custom sanitizer. */\n\n\n  function isCustomSanitizer(entry) {\n    return !isStandardValidator(entry) && !isStandardSanitizer(entry) && typeof entry[1] === 'object' && entry[1] && typeof entry[1].customSanitizer === 'function';\n  }\n\n  return function (schema) {\n    var defaultLocations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : validLocations;\n    var chains = Object.keys(schema).map(function (field) {\n      var config = schema[field];\n      var chain = createChain(field, ensureLocations(config, defaultLocations), config.errorMessage); // optional doesn't matter where it happens in the chain\n\n      if (config.optional) {\n        chain.optional(config.optional === true ? true : config.optional.options);\n      }\n\n      for (var _i = 0, _Object$entries = Object.entries(config); _i < _Object$entries.length; _i++) {\n        var entry = _Object$entries[_i];\n\n        if (protectedNames.includes(entry[0]) || !entry[1]) {\n          continue;\n        }\n\n        if (!isStandardValidator(entry) && !isStandardSanitizer(entry) && !isCustomValidator(entry) && !isCustomSanitizer(entry)) {\n          console.warn(\"express-validator: schema of \\\"\".concat(field, \"\\\" has unknown validator/sanitizer \\\"\").concat(entry[0], \"\\\"\"));\n          continue;\n        } // For validators, stuff that must come _before_ the validator itself in the chain.\n\n\n        if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n          var _entry = _slicedToArray(entry, 2),\n              validatorConfig = _entry[1];\n\n          validatorConfig.if && chain.if(validatorConfig.if);\n          validatorConfig.negated && chain.not();\n        }\n\n        if (isStandardValidator(entry) || isStandardSanitizer(entry)) {\n          var options = entry[1] ? entry[1] === true ? [] : _.castArray(entry[1].options) : [];\n          chain[entry[0]].apply(chain, _toConsumableArray(options));\n        }\n\n        if (isCustomValidator(entry)) {\n          chain.custom(entry[1].custom);\n        }\n\n        if (isCustomSanitizer(entry)) {\n          chain.customSanitizer(entry[1].customSanitizer);\n        } // For validators, stuff that must come _after_ the validator itself in the chain.\n\n\n        if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n          var _entry2 = _slicedToArray(entry, 2),\n              _validatorConfig = _entry2[1];\n\n          _validatorConfig.bail && chain.bail(_validatorConfig.bail === true ? {} : _validatorConfig.bail);\n          _validatorConfig.errorMessage && chain.withMessage(_validatorConfig.errorMessage);\n        }\n      }\n\n      return chain;\n    });\n\n    var run =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(req) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", utils_1.runAllChains(req, chains));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function run(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return Object.assign(chains, {\n      run: run\n    });\n  };\n}\n\nexports.createCheckSchema = createCheckSchema;\n/**\n * Creates an express middleware with validations for multiple fields at once in the form of\n * a schema object.\n *\n * @param schema the schema to validate.\n * @param defaultLocations\n * @returns\n */\n\nexports.checkSchema = createCheckSchema(check_1.check);\n\nfunction ensureLocations(config, defaults) {\n  // .filter(Boolean) is done because in can be undefined -- which is not going away from the type\n  // See https://github.com/Microsoft/TypeScript/pull/29955 for details\n  var locations = Array.isArray(config.in) ? config.in : [config.in].filter(Boolean);\n  var actualLocations = locations.length ? locations : defaults;\n  return actualLocations.filter(function (location) {\n    return validLocations.includes(location);\n  });\n}","map":{"version":3,"sources":["/home/amogha/btp/deploy/deployed/vreqst/node_modules/express-validator/src/middlewares/schema.js"],"names":["Object","defineProperty","exports","value","checkSchema","createCheckSchema","_","require","chain_1","utils_1","check_1","validLocations","protectedNames","createChain","extraValidators","extraSanitizers","isStandardValidator","entry","includes","ValidatorsImpl","prototype","isStandardSanitizer","SanitizersImpl","isCustomValidator","custom","isCustomSanitizer","customSanitizer","schema","defaultLocations","chains","keys","map","field","config","chain","ensureLocations","errorMessage","optional","options","entries","console","warn","validatorConfig","if","negated","not","castArray","bail","withMessage","run","req","runAllChains","assign","check","defaults","locations","Array","isArray","in","filter","Boolean","actualLocations","length","location"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSchema = exports.createCheckSchema = void 0;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst utils_1 = require(\"../utils\");\nconst check_1 = require(\"./check\");\nconst validLocations = ['body', 'cookies', 'headers', 'params', 'query'];\nconst protectedNames = ['errorMessage', 'in', 'optional'];\n/**\n * Factory for a {@link checkSchema()} function which can have extension validators and sanitizers.\n *\n * @see {@link checkSchema()}\n */\nfunction createCheckSchema(createChain, extraValidators = [], extraSanitizers = []) {\n    /** Type guard for an object entry for a standard validator. */\n    function isStandardValidator(entry) {\n        return (\n        // #664 - explicitly exclude properties which should be set per validator\n        !['not', 'withMessage'].includes(entry[0]) &&\n            (entry[0] in chain_1.ValidatorsImpl.prototype || extraValidators.includes(entry[0])) &&\n            entry[1]);\n    }\n    /** Type guard for an object entry for a standard sanitizer. */\n    function isStandardSanitizer(entry) {\n        return ((entry[0] in chain_1.SanitizersImpl.prototype || extraSanitizers.includes(entry[0])) &&\n            entry[1]);\n    }\n    /** Type guard for an object entry for a custom validator. */\n    function isCustomValidator(entry) {\n        return (!isStandardValidator(entry) &&\n            !isStandardSanitizer(entry) &&\n            typeof entry[1] === 'object' &&\n            entry[1] &&\n            typeof entry[1].custom === 'function');\n    }\n    /** Type guard for an object entry for a custom sanitizer. */\n    function isCustomSanitizer(entry) {\n        return (!isStandardValidator(entry) &&\n            !isStandardSanitizer(entry) &&\n            typeof entry[1] === 'object' &&\n            entry[1] &&\n            typeof entry[1].customSanitizer === 'function');\n    }\n    return (schema, defaultLocations = validLocations) => {\n        const chains = Object.keys(schema).map(field => {\n            const config = schema[field];\n            const chain = createChain(field, ensureLocations(config, defaultLocations), config.errorMessage);\n            // optional doesn't matter where it happens in the chain\n            if (config.optional) {\n                chain.optional(config.optional === true ? true : config.optional.options);\n            }\n            for (const entry of Object.entries(config)) {\n                if (protectedNames.includes(entry[0]) || !entry[1]) {\n                    continue;\n                }\n                if (!isStandardValidator(entry) &&\n                    !isStandardSanitizer(entry) &&\n                    !isCustomValidator(entry) &&\n                    !isCustomSanitizer(entry)) {\n                    console.warn(`express-validator: schema of \"${field}\" has unknown validator/sanitizer \"${entry[0]}\"`);\n                    continue;\n                }\n                // For validators, stuff that must come _before_ the validator itself in the chain.\n                if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n                    const [, validatorConfig] = entry;\n                    validatorConfig.if && chain.if(validatorConfig.if);\n                    validatorConfig.negated && chain.not();\n                }\n                if (isStandardValidator(entry) || isStandardSanitizer(entry)) {\n                    const options = entry[1] ? (entry[1] === true ? [] : _.castArray(entry[1].options)) : [];\n                    chain[entry[0]](...options);\n                }\n                if (isCustomValidator(entry)) {\n                    chain.custom(entry[1].custom);\n                }\n                if (isCustomSanitizer(entry)) {\n                    chain.customSanitizer(entry[1].customSanitizer);\n                }\n                // For validators, stuff that must come _after_ the validator itself in the chain.\n                if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n                    const [, validatorConfig] = entry;\n                    validatorConfig.bail &&\n                        chain.bail(validatorConfig.bail === true ? {} : validatorConfig.bail);\n                    validatorConfig.errorMessage && chain.withMessage(validatorConfig.errorMessage);\n                }\n            }\n            return chain;\n        });\n        const run = async (req) => utils_1.runAllChains(req, chains);\n        return Object.assign(chains, { run });\n    };\n}\nexports.createCheckSchema = createCheckSchema;\n/**\n * Creates an express middleware with validations for multiple fields at once in the form of\n * a schema object.\n *\n * @param schema the schema to validate.\n * @param defaultLocations\n * @returns\n */\nexports.checkSchema = createCheckSchema(check_1.check);\nfunction ensureLocations(config, defaults) {\n    // .filter(Boolean) is done because in can be undefined -- which is not going away from the type\n    // See https://github.com/Microsoft/TypeScript/pull/29955 for details\n    const locations = Array.isArray(config.in)\n        ? config.in\n        : [config.in].filter(Boolean);\n    const actualLocations = locations.length ? locations : defaults;\n    return actualLocations.filter(location => validLocations.includes(location));\n}\n"]},"metadata":{},"sourceType":"script"}