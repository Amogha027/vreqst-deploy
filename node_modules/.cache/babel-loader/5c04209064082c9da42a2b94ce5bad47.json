{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/amogha/btp/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sanitization = void 0;\n\nvar utils_1 = require(\"../utils\");\n\nvar Sanitization =\n/*#__PURE__*/\nfunction () {\n  function Sanitization(sanitizer, custom) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var stringify = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : utils_1.toString;\n\n    _classCallCheck(this, Sanitization);\n\n    this.sanitizer = sanitizer;\n    this.custom = custom;\n    this.options = options;\n    this.stringify = stringify;\n  }\n\n  _createClass(Sanitization, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(context, value, meta) {\n        var _this = this;\n\n        var path, location, runCustomSanitizer, newValue, values, newValues;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                path = meta.path, location = meta.location;\n\n                runCustomSanitizer =\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    var sanitizerValue;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            sanitizerValue = _this.sanitizer(value, meta);\n                            return _context.abrupt(\"return\", Promise.resolve(sanitizerValue));\n\n                          case 2:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function runCustomSanitizer() {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                if (!this.custom) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 5;\n                return runCustomSanitizer();\n\n              case 5:\n                newValue = _context2.sent;\n                context.setData(path, newValue, location);\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                values = Array.isArray(value) ? value : [value];\n                newValues = values.map(function (value) {\n                  return _this.sanitizer.apply(_this, [_this.stringify(value)].concat(_toConsumableArray(_this.options)));\n                }); // We get only the first value of the array if the orginal value was wrapped.\n\n                context.setData(path, values !== value ? newValues[0] : newValues, location);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x, _x2, _x3) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return Sanitization;\n}();\n\nexports.Sanitization = Sanitization;","map":{"version":3,"sources":["/home/amogha/btp/deploy/deployed/vreqst/node_modules/express-validator/src/context-items/sanitization.js"],"names":["Object","defineProperty","exports","value","Sanitization","utils_1","require","sanitizer","custom","options","stringify","toString","context","meta","path","location","runCustomSanitizer","sanitizerValue","Promise","resolve","newValue","setData","values","Array","isArray","newValues","map"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;IACMF,Y;;;AACF,wBAAYG,SAAZ,EAAuBC,MAAvB,EAG8B;AAAA,QAHCC,OAGD,uEAHW,EAGX;AAAA,QAA9BC,SAA8B,uEAAlBL,OAAO,CAACM,QAAU;;AAAA;;AAC1B,SAAKJ,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;;;;;;iDACSE,O,EAAST,K,EAAOU,I;;;;;;;;AACdC,gBAAAA,I,GAAmBD,I,CAAnBC,I,EAAMC,Q,GAAaF,I,CAAbE,Q;;AACRC,gBAAAA,kB;;;;;2CAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,4BAAAA,cADiB,GACA,KAAI,CAACV,SAAL,CAAeJ,KAAf,EAAsBU,IAAtB,CADA;AAAA,6DAEhBK,OAAO,CAACC,OAAR,CAAgBF,cAAhB,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAArBD,kB;;;;;qBAIF,KAAKR,M;;;;;;uBACkBQ,kBAAkB,E;;;AAAnCI,gBAAAA,Q;AACNR,gBAAAA,OAAO,CAACS,OAAR,CAAgBP,IAAhB,EAAsBM,QAAtB,EAAgCL,QAAhC;;;;AAGEO,gBAAAA,M,GAASC,KAAK,CAACC,OAAN,CAAcrB,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,C;AACxCsB,gBAAAA,S,GAAYH,MAAM,CAACI,GAAP,CAAW,UAAAvB,KAAK,EAAI;AAClC,yBAAO,KAAI,CAACI,SAAL,OAAA,KAAI,GAAW,KAAI,CAACG,SAAL,CAAeP,KAAf,CAAX,4BAAqC,KAAI,CAACM,OAA1C,GAAX;AACH,iBAFiB,C,EAGlB;;AACAG,gBAAAA,OAAO,CAACS,OAAR,CAAgBP,IAAhB,EAAsBQ,MAAM,KAAKnB,KAAX,GAAmBsB,SAAS,CAAC,CAAD,CAA5B,GAAkCA,SAAxD,EAAmEV,QAAnE;;;;;;;;;;;;;;;;;;;;;AAGRb,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Sanitization = void 0;\nconst utils_1 = require(\"../utils\");\nclass Sanitization {\n    constructor(sanitizer, custom, options = [], \n    // For testing only.\n    // Deliberately not calling it `toString` in order to not override `Object.prototype.toString`.\n    stringify = utils_1.toString) {\n        this.sanitizer = sanitizer;\n        this.custom = custom;\n        this.options = options;\n        this.stringify = stringify;\n    }\n    async run(context, value, meta) {\n        const { path, location } = meta;\n        const runCustomSanitizer = async () => {\n            const sanitizerValue = this.sanitizer(value, meta);\n            return Promise.resolve(sanitizerValue);\n        };\n        if (this.custom) {\n            const newValue = await runCustomSanitizer();\n            context.setData(path, newValue, location);\n            return;\n        }\n        const values = Array.isArray(value) ? value : [value];\n        const newValues = values.map(value => {\n            return this.sanitizer(this.stringify(value), ...this.options);\n        });\n        // We get only the first value of the array if the orginal value was wrapped.\n        context.setData(path, values !== value ? newValues[0] : newValues, location);\n    }\n}\nexports.Sanitization = Sanitization;\n"]},"metadata":{},"sourceType":"script"}