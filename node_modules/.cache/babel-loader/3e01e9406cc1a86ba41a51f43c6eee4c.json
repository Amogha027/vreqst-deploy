{"ast":null,"code":"var _jsxFileName = \"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/src/Components/Auth/Register.jsx\";\nimport React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport validator from \"validator\";\nimport { registerUser } from \"../../redux/actions/authActions\";\nimport { Box, Stack, Heading, Container, Input, Button, SimpleGrid, FormControl, FormLabel, FormErrorMessage, Link as CLink, Text } from \"@chakra-ui/react\";\nimport { Blur } from \"./Blur\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.onChangeName = e => {\n      if (validator.isEmpty(e.target.value)) {\n        this.setState({\n          nameerr: \"Name cannot be empty\"\n        });\n      } else this.setState({\n        nameerr: \"\"\n      });\n\n      this.setState({\n        name: e.target.value\n      });\n    };\n\n    this.onChangeUsername = e => {\n      if (validator.isEmpty(e.target.value)) {\n        this.setState({\n          usernameerr: \"Username cannot be empty\"\n        });\n      } else this.setState({\n        usernameerr: \"\"\n      });\n\n      this.setState({\n        username: e.target.value\n      });\n    };\n\n    this.onChangeOrganization = e => {\n      if (validator.isEmpty(e.target.value)) {\n        this.setState({\n          organizationerr: \"Organization cannot be empty\"\n        });\n      } else {\n        this.setState({\n          organizationerr: \"\"\n        });\n      }\n\n      this.setState({\n        organization: e.target.value\n      });\n    };\n\n    this.onChangeEmail = e => {\n      if (!validator.isEmail(e.target.value)) {\n        this.setState({\n          emailerr: \"Invalid Email\"\n        });\n      } else {\n        this.setState({\n          emailerr: \"\"\n        });\n      }\n\n      this.setState({\n        email: e.target.value\n      });\n    };\n\n    this.onChangePassword = e => {\n      if (!validator.isLength(e.target.value, {\n        min: 6,\n        max: 20\n      })) {\n        this.setState({\n          passworderr: \"Password length must be 6 to 20 characters\"\n        });\n      } else {\n        this.setState({\n          passworderr: \"\"\n        });\n      }\n\n      this.setState({\n        password: e.target.value\n      });\n    };\n\n    this.onChangePassword2 = e => {\n      if (e.target.value !== this.state.password) {\n        this.setState({\n          password2err: \"Password does not match\"\n        });\n      } else {\n        this.setState({\n          password2err: \"\"\n        });\n      }\n\n      this.setState({\n        password2: e.target.value\n      });\n    };\n\n    this.registerSubmit = e => {\n      e.preventDefault();\n      const newUser = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n        password2: this.state.password2,\n        organization: this.state.organization,\n        username: this.state.username\n      };\n      this.props.registerUser(newUser, this.props.history);\n    };\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      username: \"\",\n      organization: \"\",\n      password: \"\",\n      password2: \"\",\n      errors: {},\n      nameerr: \"\",\n      emailerr: \"\",\n      usernameerr: \"\",\n      organizationerr: \"\",\n      passworderr: \"\",\n      password2err: \"\"\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      name,\n      password,\n      password2,\n      email,\n      organization,\n      username,\n      nameerr,\n      usernameerr,\n      organizationerr,\n      passworderr,\n      emailerr,\n      password2err\n    } = this.state;\n    return React.createElement(Box, {\n      position: \"relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Container, {\n      as: SimpleGrid,\n      maxW: \"7xl\",\n      columns: {\n        base: 1,\n        md: 2\n      },\n      spacing: {\n        base: 10,\n        lg: 32\n      },\n      py: {\n        base: 10,\n        sm: 20,\n        lg: 32\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Stack, {\n      spacing: {\n        base: 10,\n        md: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Heading, {\n      lineHeight: 2.2,\n      fontSize: {\n        base: \"3xl\",\n        sm: \"4xl\",\n        md: \"5xl\",\n        lg: \"6xl\"\n      },\n      textColor: \"black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"VReqST\")), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Text, {\n      color: \"black\",\n      fontSize: {\n        base: \"sm\",\n        sm: \"2xl\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Now author clear requirement specifications with less hassle for Virtual Reality Software Products\")), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"assets/vr.png\",\n      alt: \"VR Image\",\n      width: \"250px\",\n      height: \"100px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Text, {\n      color: \"black\",\n      fontSize: {\n        base: \"md\",\n        sm: \"2x2\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"VReqST is a Tool support for writing clear requirement specifications while building Virtual Reality Software Products.It can be used by Requirement Analysts to record the elicited requirements with business stake-holders in detail.\"))), React.createElement(Stack, {\n      bg: \"gray.50\",\n      rounded: \"xl\",\n      p: {\n        base: 4,\n        sm: 6,\n        md: 8\n      },\n      spacing: {\n        base: 8\n      },\n      maxW: {\n        lg: \"lg\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Stack, {\n      spacing: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Heading, {\n      color: \"gray.800\",\n      lineHeight: 1.1,\n      fontSize: {\n        base: \"2xl\",\n        sm: \"3xl\",\n        md: \"4xl\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Create your account\")), React.createElement(Box, {\n      as: \"form\",\n      mt: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Stack, {\n      spacing: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      isRequired: true,\n      isInvalid: !!nameerr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      color: \"gray.800\",\n      fontSize: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Full Name\"), React.createElement(Input, {\n      placeholder: \"Enter your full name\",\n      bg: \"gray.100\",\n      border: 0,\n      color: \"gray.500\",\n      _placeholder: {\n        color: \"gray.500\"\n      },\n      value: name,\n      onChange: this.onChangeName,\n      id: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), !!nameerr && React.createElement(FormErrorMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, nameerr)), React.createElement(FormControl, {\n      isRequired: true,\n      isInvalid: !!usernameerr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      color: \"gray.800\",\n      fontSize: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"User Name\"), React.createElement(Input, {\n      placeholder: \"Enter your username\",\n      bg: \"gray.100\",\n      border: 0,\n      color: \"gray.500\",\n      _placeholder: {\n        color: \"gray.500\"\n      },\n      value: username,\n      onChange: this.onChangeUsername,\n      id: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), !!usernameerr && React.createElement(FormErrorMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, usernameerr)), React.createElement(FormControl, {\n      isRequired: true,\n      isInvalid: !!organizationerr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      color: \"gray.800\",\n      fontSize: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Organization\"), React.createElement(Input, {\n      placeholder: \"Enter your organization\",\n      bg: \"gray.100\",\n      border: 0,\n      color: \"gray.500\",\n      _placeholder: {\n        color: \"gray.500\"\n      },\n      value: organization,\n      onChange: this.onChangeOrganization,\n      id: \"organization\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), !!organizationerr && React.createElement(FormErrorMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, organizationerr)), React.createElement(FormControl, {\n      isRequired: true,\n      isInvalid: !!emailerr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      color: \"gray.800\",\n      fontSize: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Email address\"), React.createElement(Input, {\n      placeholder: \"Enter your email\",\n      bg: \"gray.100\",\n      border: 0,\n      color: \"gray.500\",\n      _placeholder: {\n        color: \"gray.500\"\n      },\n      type: \"email\",\n      value: email,\n      onChange: this.onChangeEmail,\n      id: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), !!emailerr && React.createElement(FormErrorMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, emailerr)), React.createElement(FormControl, {\n      isRequired: true,\n      isInvalid: !!passworderr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      color: \"gray.800\",\n      fontSize: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Input, {\n      placeholder: \"Enter your password\",\n      bg: \"gray.100\",\n      border: 0,\n      color: \"gray.500\",\n      _placeholder: {\n        color: \"gray.500\"\n      },\n      type: \"password\",\n      id: \"password\",\n      value: password,\n      onChange: this.onChangePassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), !!passworderr && React.createElement(FormErrorMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, passworderr)), React.createElement(FormControl, {\n      isRequired: true,\n      isInvalid: !!password2err,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(FormLabel, {\n      color: \"gray.800\",\n      fontSize: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Confirm Password\"), React.createElement(Input, {\n      placeholder: \"Enter your password\",\n      bg: \"gray.100\",\n      border: 0,\n      color: \"gray.500\",\n      _placeholder: {\n        color: \"gray.500\"\n      },\n      type: \"password\",\n      id: \"password2\",\n      value: password2,\n      onChange: this.onChangePassword2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), !!password2err && React.createElement(FormErrorMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, password2err))), React.createElement(Box, {\n      color: \"black\",\n      py: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Already a user?\", \" \", React.createElement(CLink, {\n      as: Link,\n      color: \"red.400\",\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Login\")), React.createElement(Button, {\n      isLoading: this.state.loading,\n      loadingText: \"Logging in\",\n      fontFamily: \"heading\",\n      mt: 3,\n      w: \"full\",\n      bgGradient: \"linear(to-r, red.400,pink.400)\",\n      color: \"white\",\n      _hover: {\n        bgGradient: \"linear(to-r, red.400,pink.400)\",\n        boxShadow: \"xl\"\n      },\n      onClick: this.registerSubmit,\n      disabled: !!nameerr || !!organizationerr || !!usernameerr || !!emailerr || !!passworderr || !!password2err || !name || !organization || !username || !email || !password || !password2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Register\")))), React.createElement(Blur, {\n      position: \"absolute\",\n      top: -150,\n      left: -100,\n      style: {\n        filter: \"blur(70px)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }));\n  }\n\n}\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/src/Components/Auth/Register.jsx"],"names":["React","Component","Link","withRouter","PropTypes","connect","validator","registerUser","Box","Stack","Heading","Container","Input","Button","SimpleGrid","FormControl","FormLabel","FormErrorMessage","CLink","Text","Blur","Register","constructor","onChangeName","e","isEmpty","target","value","setState","nameerr","name","onChangeUsername","usernameerr","username","onChangeOrganization","organizationerr","organization","onChangeEmail","isEmail","emailerr","email","onChangePassword","isLength","min","max","passworderr","password","onChangePassword2","state","password2err","password2","registerSubmit","preventDefault","newUser","props","history","errors","componentDidMount","auth","isAuthenticated","push","componentWillReceiveProps","nextProps","render","base","md","lg","sm","color","loading","bgGradient","boxShadow","filter","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport validator from \"validator\";\nimport { registerUser } from \"../../redux/actions/authActions\";\nimport {\n  Box,\n  Stack,\n  Heading,\n  Container,\n  Input,\n  Button,\n  SimpleGrid,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Link as CLink,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Blur } from \"./Blur\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\",\n      username: \"\",\n      organization: \"\",\n      password: \"\",\n      password2: \"\",\n      errors: {},\n      nameerr: \"\",\n      emailerr: \"\",\n      usernameerr: \"\",\n      organizationerr: \"\",\n      passworderr: \"\",\n      password2err: \"\",\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors,\n      });\n    }\n  }\n\n  onChangeName = (e) => {\n    if (validator.isEmpty(e.target.value)) {\n      this.setState({ nameerr: \"Name cannot be empty\" });\n    } else this.setState({ nameerr: \"\" });\n\n    this.setState({ name: e.target.value });\n  };\n  onChangeUsername = (e) => {\n    if (validator.isEmpty(e.target.value)) {\n      this.setState({ usernameerr: \"Username cannot be empty\" });\n    } else this.setState({ usernameerr: \"\" });\n    this.setState({ username: e.target.value });\n  };\n  onChangeOrganization = (e) => {\n    if (validator.isEmpty(e.target.value)) {\n      this.setState({ organizationerr: \"Organization cannot be empty\" });\n    } else {\n      this.setState({ organizationerr: \"\" });\n    }\n    this.setState({ organization: e.target.value });\n  };\n  onChangeEmail = (e) => {\n    if (!validator.isEmail(e.target.value)) {\n      this.setState({ emailerr: \"Invalid Email\" });\n    } else {\n      this.setState({ emailerr: \"\" });\n    }\n    this.setState({ email: e.target.value });\n  };\n  onChangePassword = (e) => {\n    if (!validator.isLength(e.target.value, { min: 6, max: 20 })) {\n      this.setState({\n        passworderr: \"Password length must be 6 to 20 characters\",\n      });\n    } else {\n      this.setState({\n        passworderr: \"\",\n      });\n    }\n    this.setState({ password: e.target.value });\n  };\n  onChangePassword2 = (e) => {\n    if (e.target.value !== this.state.password) {\n      this.setState({\n        password2err: \"Password does not match\",\n      });\n    } else {\n      this.setState({\n        password2err: \"\",\n      });\n    }\n    this.setState({ password2: e.target.value });\n  };\n\n  registerSubmit = (e) => {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2,\n      organization: this.state.organization,\n      username: this.state.username,\n    };\n    this.props.registerUser(newUser, this.props.history);\n  };\n\n  render() {\n    const {\n      name,\n      password,\n      password2,\n      email,\n      organization,\n      username,\n      nameerr,\n      usernameerr,\n      organizationerr,\n      passworderr,\n      emailerr,\n      password2err,\n    } = this.state;\n    return (\n      <Box position={\"relative\"}>\n        <Container\n          as={SimpleGrid}\n          maxW={\"7xl\"}\n          columns={{ base: 1, md: 2 }}\n          spacing={{ base: 10, lg: 32 }}\n          py={{ base: 10, sm: 20, lg: 32 }}\n        >\n          <Stack spacing={{ base: 10, md: 20 }}>\n          <center>\n            <Heading\n              lineHeight={2.2}\n              fontSize={{ base: \"3xl\", sm: \"4xl\", md: \"5xl\", lg: \"6xl\" }}\n              textColor={\"black\"}\n            >\n              VReqST\n            </Heading>\n            </center>\n            <center>\n            <Text color={\"black\"} fontSize={{ base: \"sm\", sm: \"2xl\" }}>\n              Now author clear requirement specifications with less hassle for Virtual Reality Software Products\n            </Text>\n            </center>\n            <center>\n              <img src=\"assets/vr.png\" alt=\"VR Image\" width=\"250px\" height=\"100px\"/>\n            </center>\n            <center>\n            <Text color={\"black\"} fontSize={{ base: \"md\", sm: \"2x2\" }}>\n              VReqST is a Tool support for writing clear requirement specifications while building Virtual Reality Software Products.It can be used by Requirement Analysts to record the elicited requirements with business stake-holders in detail.\n            </Text>\n            </center>\n          </Stack>\n          <Stack\n            bg={\"gray.50\"}\n            rounded={\"xl\"}\n            p={{ base: 4, sm: 6, md: 8 }}\n            spacing={{ base: 8 }}\n            maxW={{ lg: \"lg\" }}\n          >\n            <Stack spacing={4}>\n              <Heading\n                color={\"gray.800\"}\n                lineHeight={1.1}\n                fontSize={{ base: \"2xl\", sm: \"3xl\", md: \"4xl\" }}\n              >\n                Create your account\n              </Heading>\n            </Stack>\n            <Box as={\"form\"} mt={10}>\n              <Stack spacing={4}>\n                <FormControl isRequired isInvalid={!!nameerr}>\n                  <FormLabel color={\"gray.800\"} fontSize={\"sm\"}>\n                    Full Name\n                  </FormLabel>\n                  <Input\n                    placeholder=\"Enter your full name\"\n                    bg={\"gray.100\"}\n                    border={0}\n                    color={\"gray.500\"}\n                    _placeholder={{\n                      color: \"gray.500\",\n                    }}\n                    value={name}\n                    onChange={this.onChangeName}\n                    id=\"name\"\n                  />\n                  {!!nameerr && <FormErrorMessage>{nameerr}</FormErrorMessage>}\n                </FormControl>\n                <FormControl isRequired isInvalid={!!usernameerr}>\n                  <FormLabel color={\"gray.800\"} fontSize={\"sm\"}>\n                    User Name\n                  </FormLabel>\n                  <Input\n                    placeholder=\"Enter your username\"\n                    bg={\"gray.100\"}\n                    border={0}\n                    color={\"gray.500\"}\n                    _placeholder={{\n                      color: \"gray.500\",\n                    }}\n                    value={username}\n                    onChange={this.onChangeUsername}\n                    id=\"username\"\n                  />\n                  {!!usernameerr && (\n                    <FormErrorMessage>{usernameerr}</FormErrorMessage>\n                  )}\n                </FormControl>\n                <FormControl isRequired isInvalid={!!organizationerr}>\n                  <FormLabel color={\"gray.800\"} fontSize={\"sm\"}>\n                    Organization\n                  </FormLabel>\n                  <Input\n                    placeholder=\"Enter your organization\"\n                    bg={\"gray.100\"}\n                    border={0}\n                    color={\"gray.500\"}\n                    _placeholder={{\n                      color: \"gray.500\",\n                    }}\n                    value={organization}\n                    onChange={this.onChangeOrganization}\n                    id=\"organization\"\n                  />\n                  {!!organizationerr && (\n                    <FormErrorMessage>{organizationerr}</FormErrorMessage>\n                  )}\n                </FormControl>\n                <FormControl isRequired isInvalid={!!emailerr}>\n                  <FormLabel color={\"gray.800\"} fontSize={\"sm\"}>\n                    Email address\n                  </FormLabel>\n                  <Input\n                    placeholder=\"Enter your email\"\n                    bg={\"gray.100\"}\n                    border={0}\n                    color={\"gray.500\"}\n                    _placeholder={{\n                      color: \"gray.500\",\n                    }}\n                    type=\"email\"\n                    value={email}\n                    onChange={this.onChangeEmail}\n                    id=\"email\"\n                  />\n                  {!!emailerr && (\n                    <FormErrorMessage>{emailerr}</FormErrorMessage>\n                  )}\n                </FormControl>\n\n                <FormControl isRequired isInvalid={!!passworderr}>\n                  <FormLabel color={\"gray.800\"} fontSize={\"sm\"}>\n                    Password\n                  </FormLabel>\n                  <Input\n                    placeholder=\"Enter your password\"\n                    bg={\"gray.100\"}\n                    border={0}\n                    color={\"gray.500\"}\n                    _placeholder={{\n                      color: \"gray.500\",\n                    }}\n                    type=\"password\"\n                    id=\"password\"\n                    value={password}\n                    onChange={this.onChangePassword}\n                  />\n                  {!!passworderr && (\n                    <FormErrorMessage>{passworderr}</FormErrorMessage>\n                  )}\n                </FormControl>\n\n                <FormControl isRequired isInvalid={!!password2err}>\n                  <FormLabel color={\"gray.800\"} fontSize={\"sm\"}>\n                    Confirm Password\n                  </FormLabel>\n                  <Input\n                    placeholder=\"Enter your password\"\n                    bg={\"gray.100\"}\n                    border={0}\n                    color={\"gray.500\"}\n                    _placeholder={{\n                      color: \"gray.500\",\n                    }}\n                    type=\"password\"\n                    id=\"password2\"\n                    value={password2}\n                    onChange={this.onChangePassword2}\n                  />\n                  {!!password2err && (\n                    <FormErrorMessage>{password2err}</FormErrorMessage>\n                  )}\n                </FormControl>\n              </Stack>\n              <Box color={\"black\"} py={2}>\n                Already a user?{\" \"}\n                <CLink as={Link} color=\"red.400\" to={\"/login\"}>\n                  Login\n                </CLink>\n              </Box>\n              <Button\n                isLoading={this.state.loading}\n                loadingText=\"Logging in\"\n                fontFamily={\"heading\"}\n                mt={3}\n                w={\"full\"}\n                bgGradient=\"linear(to-r, red.400,pink.400)\"\n                color={\"white\"}\n                _hover={{\n                  bgGradient: \"linear(to-r, red.400,pink.400)\",\n                  boxShadow: \"xl\",\n                }}\n                onClick={this.registerSubmit}\n                disabled={\n                  !!nameerr ||\n                  !!organizationerr ||\n                  !!usernameerr ||\n                  !!emailerr ||\n                  !!passworderr ||\n                  !!password2err ||\n                  !name ||\n                  !organization ||\n                  !username ||\n                  !email ||\n                  !password ||\n                  !password2\n                }\n              >\n                Register\n              </Button>\n            </Box>\n          </Stack>\n        </Container>\n        {/* <Blur\n          position={\"absolute\"}\n          top={-10}\n          left={-150}\n          style={{ filter: \"blur (70px)\" }}\n        /> */}\n        <Blur\n          position={\"absolute\"}\n          top={-150}\n          left={-100}\n          style={{ filter: \"blur(70px)\" }}\n        />\n      </Box>\n    );\n  }\n}\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  errors: state.errors,\n});\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));\n"]},"metadata":{},"sourceType":"module"}