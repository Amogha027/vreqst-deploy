{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Result = exports.validationResult = void 0;\n\nvar _ = require(\"lodash\");\n\nvar base_1 = require(\"./base\");\n\nvar utils_1 = require(\"./utils\");\n/**\n * Extracts the validation errors of an express request\n */\n\n\nexports.validationResult = Object.assign(withDefaults(), {\n  withDefaults: withDefaults\n});\n/**\n * The current state of the validation errors in a request.\n */\n\nvar Result =\n/*#__PURE__*/\nfunction () {\n  function Result(formatter, errors) {\n    _classCallCheck(this, Result);\n\n    this.formatter = formatter;\n    this.errors = errors;\n  }\n  /**\n   * Gets the validation errors as an array.\n   *\n   * @param options.onlyFirstError whether only the first error of each\n   */\n\n\n  _createClass(Result, [{\n    key: \"array\",\n    value: function array(options) {\n      return options && options.onlyFirstError ? Object.values(this.mapped()) : this.errors.map(this.formatter);\n    }\n    /**\n     * Gets the validation errors as an object.\n     * If a field has more than one error, only the first one is set in the resulting object.\n     *\n     * @returns an object from field name to error\n     */\n\n  }, {\n    key: \"mapped\",\n    value: function mapped() {\n      var _this = this;\n\n      return this.errors.reduce(function (mapping, error) {\n        if (!mapping[error.param]) {\n          mapping[error.param] = _this.formatter(error);\n        }\n\n        return mapping;\n      }, {});\n    }\n    /**\n     * Specifies a function to format errors with.\n     * @param formatter the function to use for formatting errors\n     * @returns A new {@link Result} instance with the given formatter\n     */\n\n  }, {\n    key: \"formatWith\",\n    value: function formatWith(formatter) {\n      return new Result(formatter, this.errors);\n    }\n    /**\n     * @returns `true` if there are no errors, `false` otherwise\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.errors.length === 0;\n    }\n    /**\n     * Throws an error if there are validation errors.\n     */\n\n  }, {\n    key: \"throw\",\n    value: function _throw() {\n      if (!this.isEmpty()) {\n        throw Object.assign(new Error(), utils_1.bindAll(this));\n      }\n    }\n  }]);\n\n  return Result;\n}();\n\nexports.Result = Result;\n/**\n * Creates a `validationResult`-like function with default options passed to every {@link Result} it\n * returns.\n */\n\nfunction withDefaults() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = {\n    formatter: function formatter(error) {\n      return error;\n    }\n  };\n\n  var actualOptions = _.defaults(options, defaults);\n\n  return function (req) {\n    var contexts = req[base_1.contextsKey] || [];\n\n    var errors = _.flatMap(contexts, 'errors');\n\n    return new Result(actualOptions.formatter, errors);\n  };\n}","map":{"version":3,"sources":["/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/express-validator/src/validation-result.js"],"names":["Object","defineProperty","exports","value","Result","validationResult","_","require","base_1","utils_1","assign","withDefaults","formatter","errors","options","onlyFirstError","values","mapped","map","reduce","mapping","error","param","length","isEmpty","Error","bindAll","defaults","actualOptions","req","contexts","contextsKey","flatMap"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,gBAAR,GAA2B,KAAK,CAAjD;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;AACA;;;;;AAGAL,OAAO,CAACG,gBAAR,GAA2BL,MAAM,CAACU,MAAP,CAAcC,YAAY,EAA1B,EAA8B;AAAEA,EAAAA,YAAY,EAAZA;AAAF,CAA9B,CAA3B;AACA;;;;IAGMP,M;;;AACF,kBAAYQ,SAAZ,EAAuBC,MAAvB,EAA+B;AAAA;;AAC3B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;AACD;;;;;;;;;0BAKMC,O,EAAS;AACX,aAAOA,OAAO,IAAIA,OAAO,CAACC,cAAnB,GACDf,MAAM,CAACgB,MAAP,CAAc,KAAKC,MAAL,EAAd,CADC,GAED,KAAKJ,MAAL,CAAYK,GAAZ,CAAgB,KAAKN,SAArB,CAFN;AAGH;AACD;;;;;;;;;6BAMS;AAAA;;AACL,aAAO,KAAKC,MAAL,CAAYM,MAAZ,CAAmB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAC1C,YAAI,CAACD,OAAO,CAACC,KAAK,CAACC,KAAP,CAAZ,EAA2B;AACvBF,UAAAA,OAAO,CAACC,KAAK,CAACC,KAAP,CAAP,GAAuB,KAAI,CAACV,SAAL,CAAeS,KAAf,CAAvB;AACH;;AACD,eAAOD,OAAP;AACH,OALM,EAKJ,EALI,CAAP;AAMH;AACD;;;;;;;;+BAKWR,S,EAAW;AAClB,aAAO,IAAIR,MAAJ,CAAWQ,SAAX,EAAsB,KAAKC,MAA3B,CAAP;AACH;AACD;;;;;;8BAGU;AACN,aAAO,KAAKA,MAAL,CAAYU,MAAZ,KAAuB,CAA9B;AACH;AACD;;;;;;6BAGQ;AACJ,UAAI,CAAC,KAAKC,OAAL,EAAL,EAAqB;AACjB,cAAMxB,MAAM,CAACU,MAAP,CAAc,IAAIe,KAAJ,EAAd,EAA2BhB,OAAO,CAACiB,OAAR,CAAgB,IAAhB,CAA3B,CAAN;AACH;AACJ;;;;;;AAELxB,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACA;;;;;AAIA,SAASO,YAAT,GAAoC;AAAA,MAAdG,OAAc,uEAAJ,EAAI;AAChC,MAAMa,QAAQ,GAAG;AACbf,IAAAA,SAAS,EAAE,mBAAAS,KAAK;AAAA,aAAIA,KAAJ;AAAA;AADH,GAAjB;;AAGA,MAAMO,aAAa,GAAGtB,CAAC,CAACqB,QAAF,CAAWb,OAAX,EAAoBa,QAApB,CAAtB;;AACA,SAAO,UAACE,GAAD,EAAS;AACZ,QAAMC,QAAQ,GAAGD,GAAG,CAACrB,MAAM,CAACuB,WAAR,CAAH,IAA2B,EAA5C;;AACA,QAAMlB,MAAM,GAAGP,CAAC,CAAC0B,OAAF,CAAUF,QAAV,EAAoB,QAApB,CAAf;;AACA,WAAO,IAAI1B,MAAJ,CAAWwB,aAAa,CAAChB,SAAzB,EAAoCC,MAApC,CAAP;AACH,GAJD;AAKH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Result = exports.validationResult = void 0;\nconst _ = require(\"lodash\");\nconst base_1 = require(\"./base\");\nconst utils_1 = require(\"./utils\");\n/**\n * Extracts the validation errors of an express request\n */\nexports.validationResult = Object.assign(withDefaults(), { withDefaults });\n/**\n * The current state of the validation errors in a request.\n */\nclass Result {\n    constructor(formatter, errors) {\n        this.formatter = formatter;\n        this.errors = errors;\n    }\n    /**\n     * Gets the validation errors as an array.\n     *\n     * @param options.onlyFirstError whether only the first error of each\n     */\n    array(options) {\n        return options && options.onlyFirstError\n            ? Object.values(this.mapped())\n            : this.errors.map(this.formatter);\n    }\n    /**\n     * Gets the validation errors as an object.\n     * If a field has more than one error, only the first one is set in the resulting object.\n     *\n     * @returns an object from field name to error\n     */\n    mapped() {\n        return this.errors.reduce((mapping, error) => {\n            if (!mapping[error.param]) {\n                mapping[error.param] = this.formatter(error);\n            }\n            return mapping;\n        }, {});\n    }\n    /**\n     * Specifies a function to format errors with.\n     * @param formatter the function to use for formatting errors\n     * @returns A new {@link Result} instance with the given formatter\n     */\n    formatWith(formatter) {\n        return new Result(formatter, this.errors);\n    }\n    /**\n     * @returns `true` if there are no errors, `false` otherwise\n     */\n    isEmpty() {\n        return this.errors.length === 0;\n    }\n    /**\n     * Throws an error if there are validation errors.\n     */\n    throw() {\n        if (!this.isEmpty()) {\n            throw Object.assign(new Error(), utils_1.bindAll(this));\n        }\n    }\n}\nexports.Result = Result;\n/**\n * Creates a `validationResult`-like function with default options passed to every {@link Result} it\n * returns.\n */\nfunction withDefaults(options = {}) {\n    const defaults = {\n        formatter: error => error,\n    };\n    const actualOptions = _.defaults(options, defaults);\n    return (req) => {\n        const contexts = req[base_1.contextsKey] || [];\n        const errors = _.flatMap(contexts, 'errors');\n        return new Result(actualOptions.formatter, errors);\n    };\n}\n"]},"metadata":{},"sourceType":"script"}