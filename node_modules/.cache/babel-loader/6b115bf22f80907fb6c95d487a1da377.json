{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sanitization = void 0;\n\nvar utils_1 = require(\"../utils\");\n\nvar Sanitization =\n/*#__PURE__*/\nfunction () {\n  function Sanitization(sanitizer, custom) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, Sanitization);\n\n    this.sanitizer = sanitizer;\n    this.custom = custom;\n    this.options = options;\n  }\n\n  _createClass(Sanitization, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(context, value, meta) {\n        var _this = this;\n\n        var path, location, runCustomSanitizer, newValue;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                path = meta.path, location = meta.location;\n\n                runCustomSanitizer =\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    var sanitizerValue;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            sanitizerValue = _this.sanitizer(value, meta);\n                            return _context.abrupt(\"return\", Promise.resolve(sanitizerValue));\n\n                          case 2:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function runCustomSanitizer() {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                if (!this.custom) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 5;\n                return runCustomSanitizer();\n\n              case 5:\n                _context2.t0 = _context2.sent;\n                _context2.next = 9;\n                break;\n\n              case 8:\n                _context2.t0 = this.sanitizer.apply(this, [utils_1.toString(value)].concat(_toConsumableArray(this.options)));\n\n              case 9:\n                newValue = _context2.t0;\n                context.setData(path, newValue, location);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function run(_x, _x2, _x3) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return Sanitization;\n}();\n\nexports.Sanitization = Sanitization;","map":{"version":3,"sources":["/home/amogha/btp/deploy/VReqST-2/VReqST-main/VReqST/frontend/client/node_modules/express-validator/src/context-items/sanitization.js"],"names":["Object","defineProperty","exports","value","Sanitization","utils_1","require","sanitizer","custom","options","context","meta","path","location","runCustomSanitizer","sanitizerValue","Promise","resolve","toString","newValue","setData"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;IACMF,Y;;;AACF,wBAAYG,SAAZ,EAAuBC,MAAvB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACzC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;;;;;;iDACSC,O,EAASP,K,EAAOQ,I;;;;;;;;AACdC,gBAAAA,I,GAAmBD,I,CAAnBC,I,EAAMC,Q,GAAaF,I,CAAbE,Q;;AACRC,gBAAAA,kB;;;;;2CAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,4BAAAA,cADiB,GACA,KAAI,CAACR,SAAL,CAAeJ,KAAf,EAAsBQ,IAAtB,CADA;AAAA,6DAEhBK,OAAO,CAACC,OAAR,CAAgBF,cAAhB,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAArBD,kB;;;;;qBAIW,KAAKN,M;;;;;;uBACVM,kBAAkB,E;;;;;;;;+BACxB,KAAKP,SAAL,cAAeF,OAAO,CAACa,QAAR,CAAiBf,KAAjB,CAAf,4BAA2C,KAAKM,OAAhD,G;;;AAFAU,gBAAAA,Q;AAGNT,gBAAAA,OAAO,CAACU,OAAR,CAAgBR,IAAhB,EAAsBO,QAAtB,EAAgCN,QAAhC;;;;;;;;;;;;;;;;;;;;;AAGRX,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Sanitization = void 0;\nconst utils_1 = require(\"../utils\");\nclass Sanitization {\n    constructor(sanitizer, custom, options = []) {\n        this.sanitizer = sanitizer;\n        this.custom = custom;\n        this.options = options;\n    }\n    async run(context, value, meta) {\n        const { path, location } = meta;\n        const runCustomSanitizer = async () => {\n            const sanitizerValue = this.sanitizer(value, meta);\n            return Promise.resolve(sanitizerValue);\n        };\n        const newValue = this.custom\n            ? await runCustomSanitizer()\n            : this.sanitizer(utils_1.toString(value), ...this.options);\n        context.setData(path, newValue, location);\n    }\n}\nexports.Sanitization = Sanitization;\n"]},"metadata":{},"sourceType":"script"}