{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.oneOf = void 0;\n\nvar _ = require(\"lodash\");\n\nvar chain_1 = require(\"../chain\");\n\nvar context_builder_1 = require(\"../context-builder\"); // A dummy context item that gets added to surrogate contexts just to make them run\n\n\nvar dummyItem = {\n  run: function run() {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};\n\nfunction oneOf(chains, message) {\n  var result;\n\n  var middleware =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(req, _res, next) {\n      var surrogateContext, promises, allErrors, success;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build(); // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n\n              promises = chains.map(\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2(chain) {\n                  var group, results, contexts, groupErrors;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          group = Array.isArray(chain) ? chain : [chain];\n                          _context2.next = 3;\n                          return Promise.all(group.map(function (chain) {\n                            return chain.run(req, {\n                              dryRun: true\n                            });\n                          }));\n\n                        case 3:\n                          results = _context2.sent;\n                          contexts = results.map(function (result) {\n                            return result.context;\n                          });\n                          groupErrors = _.flatMap(contexts, 'errors'); // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n                          // if its entire group is valid.\n\n                          if (!groupErrors.length) {\n                            contexts.forEach(function (context) {\n                              surrogateContext.addFieldInstances(context.getData());\n                            });\n                          }\n\n                          return _context2.abrupt(\"return\", groupErrors);\n\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x4) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              _context3.prev = 2;\n              _context3.next = 5;\n              return Promise.all(promises);\n\n            case 5:\n              allErrors = _context3.sent;\n              success = allErrors.some(function (groupErrors) {\n                return groupErrors.length === 0;\n              });\n\n              if (!success) {\n                // Only add an error to the context if no group of chains had success.\n                surrogateContext.addError(typeof message === 'function' ? message({\n                  req: req\n                }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n              } // Final context running pass to ensure contexts are added and values are modified properly\n\n\n              _context3.next = 10;\n              return new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n\n            case 10:\n              result = _context3.sent;\n              next();\n              _context3.next = 17;\n              break;\n\n            case 14:\n              _context3.prev = 14;\n              _context3.t0 = _context3[\"catch\"](2);\n              next(_context3.t0);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 14]]);\n    }));\n\n    return function middleware(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var run =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(req) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                middleware(req, {}, function (e) {\n                  e ? reject(e) : resolve(result);\n                });\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function run(_x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return Object.assign(middleware, {\n    run: run\n  });\n}\n\nexports.oneOf = oneOf;","map":{"version":3,"sources":["/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/express-validator/src/middlewares/one-of.js"],"names":["Object","defineProperty","exports","value","oneOf","_","require","chain_1","context_builder_1","dummyItem","run","chains","message","result","middleware","req","_res","next","surrogateContext","ContextBuilder","addItem","build","promises","map","chain","group","Array","isArray","Promise","all","dryRun","results","contexts","context","groupErrors","flatMap","length","forEach","addFieldInstances","getData","allErrors","success","some","addError","ContextRunnerImpl","resolve","reject","e","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.oneOf = void 0;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst context_builder_1 = require(\"../context-builder\");\n// A dummy context item that gets added to surrogate contexts just to make them run\nconst dummyItem = { async run() { } };\nfunction oneOf(chains, message) {\n    let result;\n    const middleware = async (req, _res, next) => {\n        const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build();\n        // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n        const promises = chains.map(async (chain) => {\n            const group = Array.isArray(chain) ? chain : [chain];\n            const results = await Promise.all(group.map(chain => chain.run(req, { dryRun: true })));\n            const contexts = results.map(result => result.context);\n            const groupErrors = _.flatMap(contexts, 'errors');\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n            // if its entire group is valid.\n            if (!groupErrors.length) {\n                contexts.forEach(context => {\n                    surrogateContext.addFieldInstances(context.getData());\n                });\n            }\n            return groupErrors;\n        });\n        try {\n            const allErrors = await Promise.all(promises);\n            const success = allErrors.some(groupErrors => groupErrors.length === 0);\n            if (!success) {\n                // Only add an error to the context if no group of chains had success.\n                surrogateContext.addError(typeof message === 'function' ? message({ req }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n            }\n            // Final context running pass to ensure contexts are added and values are modified properly\n            result = await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n            next();\n        }\n        catch (e) {\n            next(e);\n        }\n    };\n    const run = async (req) => {\n        return new Promise((resolve, reject) => {\n            middleware(req, {}, (e) => {\n                e ? reject(e) : resolve(result);\n            });\n        });\n    };\n    return Object.assign(middleware, { run });\n}\nexports.oneOf = oneOf;\n"]},"metadata":{},"sourceType":"script"}