{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/amogha/Documents/sem-6/btp-1/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/amogha/Documents/sem-6/btp-1/deploy/deployed/vreqst/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/amogha/Documents/sem-6/btp-1/deploy/deployed/vreqst/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.oneOf = void 0;\n\nvar _ = require(\"lodash\");\n\nvar chain_1 = require(\"../chain\");\n\nvar context_builder_1 = require(\"../context-builder\");\n\nvar utils_1 = require(\"../utils\"); // A dummy context item that gets added to surrogate contexts just to make them run\n\n\nvar dummyItem = {\n  run: function run() {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};\n/**\n * Creates a middleware that will ensure that at least one of the given validation chains\n * or validation chain groups are valid.\n *\n * If none are, a single `AlternativeValidationError` or `GroupedAlternativeValidationError`\n * is added to the request, with the errors of each chain made available under the `nestedErrors` property.\n *\n * @param chains an array of validation chains to check if are valid.\n *               If any of the items of `chains` is an array of validation chains, then all of them\n *               must be valid together for the request to be considered valid.\n */\n\nfunction oneOf(chains) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var run =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(req, opts) {\n      var surrogateContext, promises, allErrors, success, message, leastErroredIndex, i;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build(); // Run each group of chains in parallel\n\n              promises = chains.map(\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2(chain) {\n                  var group, results, _results$reduce, contexts, groupErrors;\n\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          group = Array.isArray(chain) ? chain : [chain];\n                          _context2.next = 3;\n                          return utils_1.runAllChains(req, group, {\n                            dryRun: true\n                          });\n\n                        case 3:\n                          results = _context2.sent;\n                          _results$reduce = results.reduce(function (_ref3, result) {\n                            var contexts = _ref3.contexts,\n                                groupErrors = _ref3.groupErrors;\n                            var context = result.context;\n                            contexts.push(context);\n                            var fieldErrors = context.errors.filter(function (error) {\n                              return error.type === 'field';\n                            });\n                            groupErrors.push.apply(groupErrors, _toConsumableArray(fieldErrors));\n                            return {\n                              contexts: contexts,\n                              groupErrors: groupErrors\n                            };\n                          }, {\n                            contexts: [],\n                            groupErrors: []\n                          }), contexts = _results$reduce.contexts, groupErrors = _results$reduce.groupErrors; // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n                          // if its entire group is valid.\n\n                          if (!groupErrors.length) {\n                            contexts.forEach(function (context) {\n                              surrogateContext.addFieldInstances(context.getData());\n                            });\n                          }\n\n                          return _context2.abrupt(\"return\", groupErrors);\n\n                        case 7:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              _context3.next = 4;\n              return Promise.all(promises);\n\n            case 4:\n              allErrors = _context3.sent;\n              success = allErrors.some(function (groupErrors) {\n                return groupErrors.length === 0;\n              });\n\n              if (success) {\n                _context3.next = 19;\n                break;\n              }\n\n              message = options.message || 'Invalid value(s)';\n              _context3.t0 = options.errorType;\n              _context3.next = _context3.t0 === 'flat' ? 11 : _context3.t0 === 'least_errored' ? 13 : _context3.t0 === 'grouped' ? 17 : 17;\n              break;\n\n            case 11:\n              surrogateContext.addError({\n                type: 'alternative',\n                req: req,\n                message: message,\n                nestedErrors: _.flatMap(allErrors)\n              });\n              return _context3.abrupt(\"break\", 19);\n\n            case 13:\n              leastErroredIndex = 0;\n\n              for (i = 1; i < allErrors.length; i++) {\n                if (allErrors[i].length < allErrors[leastErroredIndex].length) {\n                  leastErroredIndex = i;\n                }\n              }\n\n              surrogateContext.addError({\n                type: 'alternative',\n                req: req,\n                message: message,\n                nestedErrors: allErrors[leastErroredIndex]\n              });\n              return _context3.abrupt(\"break\", 19);\n\n            case 17:\n              // grouped\n              surrogateContext.addError({\n                type: 'alternative_grouped',\n                req: req,\n                message: message,\n                nestedErrors: allErrors\n              });\n              return _context3.abrupt(\"break\", 19);\n\n            case 19:\n              _context3.next = 21;\n              return new chain_1.ContextRunnerImpl(surrogateContext).run(req, opts);\n\n            case 21:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 22:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function run(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var middleware = function middleware(req, _res, next) {\n    return run(req).then(function () {\n      return next();\n    }, next);\n  };\n\n  return Object.assign(middleware, {\n    run: run\n  });\n}\n\nexports.oneOf = oneOf;","map":{"version":3,"sources":["/home/amogha/Documents/sem-6/btp-1/deploy/deployed/vreqst/node_modules/express-validator/src/middlewares/one-of.js"],"names":["Object","defineProperty","exports","value","oneOf","_","require","chain_1","context_builder_1","utils_1","dummyItem","run","chains","options","req","opts","surrogateContext","ContextBuilder","addItem","build","promises","map","chain","group","Array","isArray","runAllChains","dryRun","results","reduce","result","contexts","groupErrors","context","push","fieldErrors","errors","filter","error","type","length","forEach","addFieldInstances","getData","Promise","all","allErrors","success","some","message","errorType","addError","nestedErrors","flatMap","leastErroredIndex","i","ContextRunnerImpl","middleware","_res","next","then","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.oneOf = void 0;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst context_builder_1 = require(\"../context-builder\");\nconst utils_1 = require(\"../utils\");\n// A dummy context item that gets added to surrogate contexts just to make them run\nconst dummyItem = { async run() { } };\n/**\n * Creates a middleware that will ensure that at least one of the given validation chains\n * or validation chain groups are valid.\n *\n * If none are, a single `AlternativeValidationError` or `GroupedAlternativeValidationError`\n * is added to the request, with the errors of each chain made available under the `nestedErrors` property.\n *\n * @param chains an array of validation chains to check if are valid.\n *               If any of the items of `chains` is an array of validation chains, then all of them\n *               must be valid together for the request to be considered valid.\n */\nfunction oneOf(chains, options = {}) {\n    const run = async (req, opts) => {\n        const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build();\n        // Run each group of chains in parallel\n        const promises = chains.map(async (chain) => {\n            const group = Array.isArray(chain) ? chain : [chain];\n            const results = await utils_1.runAllChains(req, group, { dryRun: true });\n            const { contexts, groupErrors } = results.reduce(({ contexts, groupErrors }, result) => {\n                const { context } = result;\n                contexts.push(context);\n                const fieldErrors = context.errors.filter((error) => error.type === 'field');\n                groupErrors.push(...fieldErrors);\n                return { contexts, groupErrors };\n            }, {\n                contexts: [],\n                groupErrors: [],\n            });\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n            // if its entire group is valid.\n            if (!groupErrors.length) {\n                contexts.forEach(context => {\n                    surrogateContext.addFieldInstances(context.getData());\n                });\n            }\n            return groupErrors;\n        });\n        const allErrors = await Promise.all(promises);\n        const success = allErrors.some(groupErrors => groupErrors.length === 0);\n        if (!success) {\n            const message = options.message || 'Invalid value(s)';\n            switch (options.errorType) {\n                case 'flat':\n                    surrogateContext.addError({\n                        type: 'alternative',\n                        req,\n                        message,\n                        nestedErrors: _.flatMap(allErrors),\n                    });\n                    break;\n                case 'least_errored':\n                    let leastErroredIndex = 0;\n                    for (let i = 1; i < allErrors.length; i++) {\n                        if (allErrors[i].length < allErrors[leastErroredIndex].length) {\n                            leastErroredIndex = i;\n                        }\n                    }\n                    surrogateContext.addError({\n                        type: 'alternative',\n                        req,\n                        message,\n                        nestedErrors: allErrors[leastErroredIndex],\n                    });\n                    break;\n                case 'grouped':\n                default:\n                    // grouped\n                    surrogateContext.addError({\n                        type: 'alternative_grouped',\n                        req,\n                        message,\n                        nestedErrors: allErrors,\n                    });\n                    break;\n            }\n        }\n        // Final context running pass to ensure contexts are added and values are modified properly\n        return await new chain_1.ContextRunnerImpl(surrogateContext).run(req, opts);\n    };\n    const middleware = (req, _res, next) => run(req).then(() => next(), next);\n    return Object.assign(middleware, { run });\n}\nexports.oneOf = oneOf;\n"]},"metadata":{},"sourceType":"script"}