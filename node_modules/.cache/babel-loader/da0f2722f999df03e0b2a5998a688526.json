{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SanitizersImpl = void 0;\n\nvar validator = require(\"validator\");\n\nvar sanitization_1 = require(\"../context-items/sanitization\");\n\nvar SanitizersImpl =\n/*#__PURE__*/\nfunction () {\n  function SanitizersImpl(builder, chain) {\n    _classCallCheck(this, SanitizersImpl);\n\n    this.builder = builder;\n    this.chain = chain;\n  } // custom sanitizers\n\n\n  _createClass(SanitizersImpl, [{\n    key: \"customSanitizer\",\n    value: function customSanitizer(sanitizer) {\n      this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\n      return this.chain;\n    }\n  }, {\n    key: \"default\",\n    value: function _default(default_value) {\n      return this.customSanitizer(function (value) {\n        return [undefined, null, NaN, ''].includes(value) ? default_value : value;\n      });\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(values_to_replace, new_value) {\n      if (!Array.isArray(values_to_replace)) {\n        values_to_replace = [values_to_replace];\n      }\n\n      return this.customSanitizer(function (value) {\n        return values_to_replace.includes(value) ? new_value : value;\n      });\n    } // Standard sanitizers\n\n  }, {\n    key: \"addStandardSanitization\",\n    value: function addStandardSanitization(sanitizer) {\n      for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        options[_key - 1] = arguments[_key];\n      }\n\n      this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\n      return this.chain;\n    }\n  }, {\n    key: \"blacklist\",\n    value: function blacklist(chars) {\n      return this.addStandardSanitization(validator.blacklist, chars);\n    }\n  }, {\n    key: \"escape\",\n    value: function escape() {\n      return this.addStandardSanitization(validator.escape);\n    }\n  }, {\n    key: \"unescape\",\n    value: function unescape() {\n      return this.addStandardSanitization(validator.unescape);\n    }\n  }, {\n    key: \"ltrim\",\n    value: function ltrim(chars) {\n      return this.addStandardSanitization(validator.ltrim, chars);\n    }\n  }, {\n    key: \"normalizeEmail\",\n    value: function normalizeEmail(options) {\n      return this.addStandardSanitization(validator.normalizeEmail, options);\n    }\n  }, {\n    key: \"rtrim\",\n    value: function rtrim(chars) {\n      return this.addStandardSanitization(validator.rtrim, chars);\n    }\n  }, {\n    key: \"stripLow\",\n    value: function stripLow(keep_new_lines) {\n      return this.addStandardSanitization(validator.stripLow, keep_new_lines);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.customSanitizer(function (value) {\n        return value !== undefined && (Array.isArray(value) && value || [value]) || [];\n      });\n    }\n  }, {\n    key: \"toBoolean\",\n    value: function toBoolean(strict) {\n      return this.addStandardSanitization(validator.toBoolean, strict);\n    }\n  }, {\n    key: \"toDate\",\n    value: function toDate() {\n      return this.addStandardSanitization(validator.toDate);\n    }\n  }, {\n    key: \"toFloat\",\n    value: function toFloat() {\n      return this.addStandardSanitization(validator.toFloat);\n    }\n  }, {\n    key: \"toInt\",\n    value: function toInt(radix) {\n      return this.addStandardSanitization(validator.toInt, radix);\n    }\n  }, {\n    key: \"toLowerCase\",\n    value: function toLowerCase() {\n      return this.customSanitizer(function (value) {\n        return typeof value === 'string' ? value.toLowerCase() : value;\n      });\n    }\n  }, {\n    key: \"toUpperCase\",\n    value: function toUpperCase() {\n      return this.customSanitizer(function (value) {\n        return typeof value === 'string' ? value.toUpperCase() : value;\n      });\n    }\n  }, {\n    key: \"trim\",\n    value: function trim(chars) {\n      return this.addStandardSanitization(validator.trim, chars);\n    }\n  }, {\n    key: \"whitelist\",\n    value: function whitelist(chars) {\n      return this.addStandardSanitization(validator.whitelist, chars);\n    }\n  }]);\n\n  return SanitizersImpl;\n}();\n\nexports.SanitizersImpl = SanitizersImpl;","map":{"version":3,"sources":["/home/amogha/btp/temp/VReqST-main/VReqST/frontend/client/node_modules/express-validator/src/chain/sanitizers-impl.js"],"names":["Object","defineProperty","exports","value","SanitizersImpl","validator","require","sanitization_1","builder","chain","sanitizer","addItem","Sanitization","default_value","customSanitizer","undefined","NaN","includes","values_to_replace","new_value","Array","isArray","options","chars","addStandardSanitization","blacklist","escape","unescape","ltrim","normalizeEmail","rtrim","keep_new_lines","stripLow","strict","toBoolean","toDate","toFloat","radix","toInt","toLowerCase","toUpperCase","trim","whitelist"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SanitizersImpl = void 0;\nconst validator = require(\"validator\");\nconst sanitization_1 = require(\"../context-items/sanitization\");\nclass SanitizersImpl {\n    constructor(builder, chain) {\n        this.builder = builder;\n        this.chain = chain;\n    }\n    // custom sanitizers\n    customSanitizer(sanitizer) {\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\n        return this.chain;\n    }\n    default(default_value) {\n        return this.customSanitizer(value => [undefined, null, NaN, ''].includes(value) ? default_value : value);\n    }\n    replace(values_to_replace, new_value) {\n        if (!Array.isArray(values_to_replace)) {\n            values_to_replace = [values_to_replace];\n        }\n        return this.customSanitizer(value => (values_to_replace.includes(value) ? new_value : value));\n    }\n    // Standard sanitizers\n    addStandardSanitization(sanitizer, ...options) {\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\n        return this.chain;\n    }\n    blacklist(chars) {\n        return this.addStandardSanitization(validator.blacklist, chars);\n    }\n    escape() {\n        return this.addStandardSanitization(validator.escape);\n    }\n    unescape() {\n        return this.addStandardSanitization(validator.unescape);\n    }\n    ltrim(chars) {\n        return this.addStandardSanitization(validator.ltrim, chars);\n    }\n    normalizeEmail(options) {\n        return this.addStandardSanitization(validator.normalizeEmail, options);\n    }\n    rtrim(chars) {\n        return this.addStandardSanitization(validator.rtrim, chars);\n    }\n    stripLow(keep_new_lines) {\n        return this.addStandardSanitization(validator.stripLow, keep_new_lines);\n    }\n    toArray() {\n        return this.customSanitizer(value => (value !== undefined && ((Array.isArray(value) && value) || [value])) || []);\n    }\n    toBoolean(strict) {\n        return this.addStandardSanitization(validator.toBoolean, strict);\n    }\n    toDate() {\n        return this.addStandardSanitization(validator.toDate);\n    }\n    toFloat() {\n        return this.addStandardSanitization(validator.toFloat);\n    }\n    toInt(radix) {\n        return this.addStandardSanitization(validator.toInt, radix);\n    }\n    toLowerCase() {\n        return this.customSanitizer(value => (typeof value === 'string' ? value.toLowerCase() : value));\n    }\n    toUpperCase() {\n        return this.customSanitizer(value => (typeof value === 'string' ? value.toUpperCase() : value));\n    }\n    trim(chars) {\n        return this.addStandardSanitization(validator.trim, chars);\n    }\n    whitelist(chars) {\n        return this.addStandardSanitization(validator.whitelist, chars);\n    }\n}\nexports.SanitizersImpl = SanitizersImpl;\n"]},"metadata":{},"sourceType":"script"}