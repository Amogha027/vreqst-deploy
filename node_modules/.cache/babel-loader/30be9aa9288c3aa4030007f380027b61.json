{"ast":null,"code":"// `call`, just like a function.\nexport class RawTask {\n  call() {\n    try {\n      this.task && this.task();\n    } catch (error) {\n      this.onError(error);\n    } finally {\n      this.task = null;\n      this.release(this);\n    }\n  }\n\n  constructor(onError, release) {\n    this.onError = onError;\n    this.release = release;\n    this.task = null;\n  }\n\n}","map":{"version":3,"sources":["../src/RawTask.ts"],"names":["RawTask","task","onError","release","call","error"],"mappings":"AAIA;AACA,OAAO,MAAMA,OAAN,CAAa;AAQZI,EAAAA,IAAI,GAAG;AACb,QAAI;AACH,WAAKH,IAAL,IAAa,KAAKA,IAAL,EAAb;AACA,KAFD,CAEE,OAAOI,KAAP,EAAc;AACf,WAAKH,OAAL,CAAaG,KAAb;AACA,KAJD,SAIU;AACT,WAAKJ,IAAL,GAAY,IAAZ;AACA,WAAKE,OAAL,CAAa,IAAb;AACA;AACD;;AAdD,EAAA,WAAA,CACSD,OADT,EAESC,OAFT,EAGE;SAFOD,O,GAAAA,O;SACAC,O,GAAAA,O;SAJFF,I,GAAsB,I;AAKzB;;AANe","sourcesContent":["// We wrap tasks with recyclable task objects.  A task object implements\n\nimport type { Task, TaskFn } from 'types'\n\n// `call`, just like a function.\nexport class RawTask implements Task {\n\tpublic task: TaskFn | null = null\n\n\tpublic constructor(\n\t\tprivate onError: (err: any) => void,\n\t\tprivate release: (t: RawTask) => void,\n\t) {}\n\n\tpublic call() {\n\t\ttry {\n\t\t\tthis.task && this.task()\n\t\t} catch (error) {\n\t\t\tthis.onError(error)\n\t\t} finally {\n\t\t\tthis.task = null\n\t\t\tthis.release(this)\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}